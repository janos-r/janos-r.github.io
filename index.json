[{"authors":["admin"],"categories":null,"content":"I grew up in a half Czech, half German family in north Czech Republic. I finished my Master\u0026rsquo;s in economics in 2016, but 2017 I became interested in IT and studied various modern technologies by myself for 1,5 years and I managed to find my current position as a Node.js developer starting 2019. I continue to learn new things and I enjoy my path as a back-end developer. Recently I started focusing on cloud (Azure, Docker, Kubernetes, Helm), since we are actively using it in the company. And I love to try out new things with Rust.\nEarly 2018 I tried Linux Mint and I quickly switched over from Windows and became a big Linux and free software advocate.\nOne of my biggest and oldest hobbies is the game of go. I was managing a local go club with students, a self-made website, and we were organizing a yearly nationwide tournament for 4 years (2011 – 2014).\nThank you for visiting my page 😄\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/author/radim-janos/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/radim-janos/","section":"authors","summary":"I grew up in a half Czech, half German family in north Czech Republic. I finished my Master\u0026rsquo;s in economics in 2016, but 2017 I became interested in IT and studied various modern technologies by myself for 1,5 years and I managed to find my current position as a Node.","tags":null,"title":"Radim Janoš","type":"authors"},{"authors":null,"categories":null,"content":"A 2D RPG-like groundwork with Bevy and LDtk.\nMotivation Curiosity A year and a half ago I saw a simple google promotion rpg-like game. I was surprised by the curiosity a simple game like that can create. Not only did I enjoy walking around in that small world, thinking how well some of the sprites turned out, but also how much time it had to take, even though it was released just as a weekly free easter-egg almost.\nI started thinking if I could make something like that, if that would be even possible. I never used any other game engine. I knew practically nothing about Unreal, Unity or Godot. But one month before that I made this article where I experienced working with Bevy, which is mostly intended as a game engine, though in that article I used is just as an ECS system.\nIf my goal was to make just a game, I would probably use Typescript and some recommended library. But this was not really my goal. One of the reasons I like rust, is that it promises strong utility through performance, while being more accessible to newcomers than C++. I enjoy using rust, Bevy was interesting and I became curious how a real game would be even started, so I started looking into it.\nDevelopment process Early days I set my goals low, I just wanted to get something going. Under some Bevy links I found \u0026ldquo;bevy_retrograde\u0026rdquo;. It looked at that time absolutely perfect to what I wanted to achieve. Basically a starting point to just get going with a simple rpg-like game. I went through the code in the examples of both Bevy and Bevy_retrograde and after many tries and errors, I ended up with with a moving and animating Gabe, the name of the default character provided as part of a few Bevy assets. He even collided with some shapes I created. Bevy retrograde provided some tool for creating these collisions out of shapes. It took less than 100 lines of code, but I was very proud of myself anyway, since the process wasn\u0026rsquo;t easy. I never knew exactly which examples to take guidelines from.\nAnd there start the problems. This bevy_retrograde was not really the big help as I was hoping. The only extra thing it really provided was this collision tool, but you also don\u0026rsquo;t always want to collide with every single pixel you or your surroundings are made of. Also I had no idea how to create the graphics for levels with just this. I realized if I wanted to continue, it would make little sense to continue building on this retrograde tool. This made me put it on the side for another year.\nNew spirit Almost exactly one year later, I noticed Bevy gaining slowly but steadily more and more traction. Before there was Amethyst and some other competitors, but by this time Bevy seamed the clear leader among Game engines in Rust. New versions were coming out and I was tempted to try to port my old code to the new version and have another look at it. That was the second commit.\nA slow process I could write a small article about every single commit after that. This was by far my biggest Rust project so far. It currently has around 1.000 lines but it feels like much much more, lol. I will mention that planning was and is a big part of such a process. After every single commit, I rewrote my priorities of the features that should be made next and a vision of the tools that could achieve that. I knew that I will eventually have to implement another solution for colliders and some tool to help with graphics. Luckily both Rapier and LDtk fit those roles well.\nHurdles Rapier is such a polished tool, I was most worried about colliders, but in th end, his was the least buggy part of my tools. I wrote down the 4 major issues I stumbled upon in my my dev process at the bottom of the README.md they have links to the connected issue trackers and descriptions. I managed to workaround all of them, but the first was probably the most obscure one. Shortly the UI and text elements that you can spawn through Bevy are not perfect yet. This will be hopefully addressed in the future or be superseded by some other solution. The text box for displaying text to the user is probably one of the most lacking parts of my code. But its implementation is already so complicated, I dread touching it again. Thankfully there are new libraries dedicated to gui in bevy coming out like bevy_egui. I wonder what would be a good solution for better text boxes or speech/alert bubbles next to entities.\nThe other three issues were connected to bevy_ecs_ldtk which is the library that connects the LDtk editor to Bevy. Among the other libraries, this is probably the weakest link, but when using LDtk with Bevy, this library seams like the by far best option. It is maintained by one dedicated and awesome guy, but it\u0026rsquo;s just one guy. I submitted a few PRs and Issues, but LDtk is made by a professional company or at least appears that way. And Bevy is also a huge project by now. I hope the love for bevy_ecs_ldtk grows and receives more help from the community. Since both Bevy and LDtk are amazing and we also need an amazing bridge.\nWhy it is amazing Bevy and LDtk are amazing, because they share one thing, and that is simplicity for the purpose of empowering future development. Imagine if you had to do the same thing with C++ and Tiled. Of course it can be done and the libraries are I\u0026rsquo;m sure more mature, but it is maybe unnecessarily difficult to pick up. Yes, you could say the same about JavaScript/Python, but unlike those, tools build on Rust have a serious potential to break through to a professionally acknowledged realm. Usability and accessibility, that is the magic combo that lies at the end of this tunnel.\nConclusion I am happy to have brought this to something like a proof of concept level and that it can be smoothly run in wasm on my site. Please feel free to click here or the link on top of the page. After it loads, just click once into the middle of the canvas so it focuses, and after you can move the player with wasd or arrows. There is no other input currently.\nI hope this can motivate anybody to try out some of these tools, or even build upon my own repo. It is free to use! I hope it helps somebody to build something awesome.\n","date":1673740800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1673740800,"objectID":"488af273840e928ea1f4b1d4c56187d2","permalink":"/project/rusty_woods/","publishdate":"2023-01-15T00:00:00Z","relpermalink":"/project/rusty_woods/","section":"project","summary":"2D rpg groundwork with Bevy and LDtk","tags":["Code","Rust"],"title":"Rusty Woods","type":"project"},{"authors":null,"categories":null,"content":"Bevy experiment This is a refactor of my previous challenge agent-tag into the ECS system of Bevy.\nBackstory 6 months ago, I accepted a challenge to make a independent agent system in Rust. This sounded very interesting to me and you can read more about it on it\u0026rsquo;s own project page agent-tag. I got it working, which was nice, but there was still this lingering thought that left me unsatisfied.\nThe issue I had issues with very basic principles while using pointers. I have a Vec\u0026lt;Agents\u0026gt;, but every single Agent wats to have a link to the parent Vec also. I made it work with weak links. Luckily I found this excellent page in the Rust Book that perfectly describes this issue. You get a stack overflow, a reference cycle, if a child references it\u0026rsquo;s own parent with just a Rc. Thanks to the Weak link, that is blind until it\u0026rsquo;s upgraded, you get the structure working. But if you than want to use it for mutation, you still can\u0026rsquo;t use a already used reference, so you have to hack around it like I did with cloning the whole state and using only its links that way. This can be seen in the example from my old code bellow with my original comments that I left there for future me.\nThis later version was made with Arc\u0026lt;Mutex\u0026lt;World\u0026gt;\u0026gt; for the parent and you can just clone it to the Agents. But the proper single-thread code was with Rc\u0026lt;RefCell\u0026lt;World\u0026gt;\u0026gt; for the parent and through Rc::downgrade(world) you store it in the agents as Weak\u0026lt;RefCell\u0026lt;World\u0026gt;\u0026gt;. That\u0026rsquo;s why in this example, you access the links with just .lock(). In the single-thread case you have to use .borrow() and .borrow_mut() when working from the parent (World). And prepend it with .upgrade() when working from inside the child (Agent). It\u0026rsquo;s ironic that the single-thread syntax is a little more complicated, but it is good to know both ways.\n// regret: this still feels like a hack to me // tag agents let agents = world.lock().unwrap().agents.clone(); agents .iter() .enumerate() .for_each(|(index, agent)| agent.tag(index)); // ... pub fn tag(\u0026amp;self, my_index: usize) { // this is a cloned self, so changes on it won't influence the real world! // only it's links or current state are useful if self.status == Status::Tagged { if let Some(target) = self.find_neighbor() { if self.announce_tag { println!(\u0026quot;!!!! FOUND NEIGHBOR !!!!\u0026quot;); } self.world_link.lock().unwrap().tag_agent(my_index, target); } }; }  So in the end the code works. I even attempted to make this multi-threaded version with Rayon, but without managing to get a performance improvement. Multi-thread is still difficult to do right.\nA ray of light Half a year passed and I was watching just another Rust YouTube video, not even a new one. But suddenly the lady started talking about exactly my issue above. Suddenly I felt like not a crazy person, but that this is possibly a common issue for many people. Here is the exact timestamp where she seams to talk about exactly this -\u0026gt; video.\nOr this embedded should also open at timestamp:\n   She continues to talk about this being an inherent problem of OOP ways of thinking about code. How generational indexes are addressing this issue and how they are used especially in ECS systems and game development. Things finally started making sense after all those months.\nBevy This prompted me to look up Bevy. I saw it shortly once before when I was looking for ways to create a go-board for my \u0026ldquo;yewban\u0026rdquo; project (css was enough for that lol). It was time for a second look at Bevy. It is only a year old, but already looks incredibly promising. I also love some of its core ideas. Obviously it\u0026rsquo;s free software, but also that they don\u0026rsquo;t use any fancy macros, so that using it doesn\u0026rsquo;t feel like black magic. And also that it seams very easy and modular to use \u0026ldquo;plugins\u0026rdquo;, making it probably easy for other developers to extend the core library.\nObservations during the refactor This is my first time using Bevy, so all my negative comments are probably just lack of knowledge, but the purpose of of this article is to convey my experience and feelings with it.\n One of the drawbacks of using an ECS system is the lack of indexing your own Vec of entities. In my old code, I could write:  ... .agents .iter() .position(|agent| {...})   .position() is Rusts' own tool to give you a Option\u0026lt;usize\u0026gt; with the index where it maybe found something. In bevy, if I didn\u0026rsquo;t miss something, if I want to check the first matching entity and continue to use it for other tings, I had to do this with:\nlet mut origin: Option\u0026lt;Entity\u0026gt; = None; for (status, entity) in query.iter_mut() { if *status == Status::Tagged { origin = Some(entity); break; }; }  It\u0026rsquo;s not too bothersome, but it doesn\u0026rsquo;t feel elegant.\nAlso connected to this is a small disappointment. Recently they claimed that the new .for_each() should be preferred to .iter(). Unfortunately if you are searching for the first occurrence of something, you want to break soon to be more efficient. But you also can\u0026rsquo;t use the more efficient .for_each() with break. Not horrible, but a little unfortunate.\n I know that Bevy and game engines in general are made for multi-threaded work. Unfortunately my exercise had very strict turns and so I had to write something like:  .add_system(update_grid.system().label(UPDATE_GRID)) .add_system(print_grid.system().label(PRINT_GRID).after(UPDATE_GRID)) .add_system(move_agents.system().label(MOVE_AGENTS).after(PRINT_GRID)) .add_system(tag.system().label(TAG).after(MOVE_AGENTS)) .add_system(sleep2s.system().label(SLEEP).after(TAG)) .add_system(exit.system().label(EXIT).after(SLEEP))  Any time you want to switch around some step, think about all the editing. Again, it\u0026rsquo;s not a dealbreaker, but something doesn\u0026rsquo;t feel right. I tried using a single-threaded custom stage, but that also doesn\u0026rsquo;t guarantee execution order. You have to be specific with the order by using labels, also opening you up to contradictions if messed up.\n The query syntax works really well. Although you have to get used to the weird feeling that all the arguments used in the .system() functions are written without \u0026amp;. So you take a:  fn tag( mut agents: Query\u0026lt;(\u0026amp;mut Status, \u0026amp;Position, Entity), With\u0026lt;Agent\u0026gt;\u0026gt;, mut tag_count: ResMut\u0026lt;TagCount\u0026gt;, grid_size: Res\u0026lt;InputSize\u0026gt;, announce_tag: Res\u0026lt;InputAnnounceTag\u0026gt;, ) {...  But you are not really taking ownership of anything. Because you are not explicitly returning any of them at the end of the function. In a normal function this would be resource acquisition and drop at the end of the function scope. Also changing the tag_count works just like you would expect from a borrowed mut. I don\u0026rsquo;t mind it, but it is something I did squint at for a little bit, doubting if I remember the ownership rules correctly. I am still not exactly sure how or why this works, but I hope I\u0026rsquo;m not writing nonsense here, lol.\nConclusion I didn\u0026rsquo;t have any borrow-checker or syntax fighting issues with bevy. I found it very intuitive and it is amazing that you can relatively easily read its source code. It is not using strictly just a component entity-map with generational-indexes, but something called Archetypes. I got a little lost in the internal logic there, but suffice it to say that it just works.\nYou simply write systems with queries that have everything you need and if you don\u0026rsquo;t have to be tick/frame-exact, you can just throw it into the app builder and you get a perfectly working multithreaded system that takes care of everything.\nBenchmark Unfortunately my use-case was just a very simple single-threaded one. So when I compared the performance to my old suboptimal code without any shell printing.\n10k ticks, default 40 entities on a 25x25 grid:\ntime cargo run --release -- -t0 -m10000 -d     Bevy Old code     ~700 ms \u0026lt; 100 ms    The old suboptimal code is still almost 10x quicker. Even with the Arc instead of Rc, while cloning the whole state every time. So that was a little underwhelming. On the other hand, Bevy is a full-fledged ECS system with many components that make it possible to raise a real large scale project. My tiny example with just 40 entities on a small grid\u0026hellip; maybe it should not be surprising it is 10x faster on a small code base and a small sample.\n I tried again with a slightly bigger numbers. Still 10k ticks, but 500 entities and 50x50 grid:\ntime cargo run --release -- -s50 -a500 -t0 -m10000 -d     Bevy Old code     ~880 ms ~240 ms    So while the suboptimal code more than doubled, Bevy increased only about +25%.\n 10x again\u0026hellip; size 200 and 5k entities.\ntime cargo run --release -- -s200 -a5000 -t0 -m10000 -d     Bevy Old code     2.15 s 1.62 s    Repeating this command gives in both crates surprisingly consistent results. Even when changing the number of ticks, the suboptimal code is around 75% that of Bevy. So as the world grows, the times get closer. That is not surprising.\n With 20k entities, Bevy is finally faster.\ntime cargo run --release -- -s200 -a20000 -t0 -m10000 -d     Bevy Old code     5.85 s 6.12 s    But this is all just for fun! This is obviously not indicative of any real-game use-case. Firstly this is all single-threaded. And secondly my old code is just a pice of an experiment and not suited for any other use. Also there are probably many optimizations I could have used in Bevy that I missed. As I said, first try.\nPS Bevy is amazing and inspiring! Especially considering it is only one year old. I might try to learn some of the graphics plugins it provides and try to learn some more in the future.\n","date":1629763200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1629763200,"objectID":"2dafd1e083f835b5675a6a56e5f0b365","permalink":"/project/agent_tag_bevy/","publishdate":"2021-08-24T00:00:00Z","relpermalink":"/project/agent_tag_bevy/","section":"project","summary":"This is a refactor of my previous challenge into the ECS system of Bevy.","tags":["Code","Rust"],"title":"Game engine","type":"project"},{"authors":null,"categories":null,"content":"So, this will not be a deep dive, but just a simple introduction and a very simple and quick way how to make your own gemini page.\nIn case you are wondering why anybody finds gemini interesting, when it is obviously less feature rich than the regular web, than just have a short listen to this great summary (video) of what is wrong with the current web. Gemini is not a solution to that, it is just an idea of what could exist alongside the normal web.\nI know about gemini for maybe a few weeks already. My love for rust led me to try the cli client Asuka, but I don\u0026rsquo;t recommend it. There are better cli clients if that is what you want. But a few days ago, I had again a look at the official site of the protocol and saw that it got quite a bit bigger and got a large number of clients in just a very short time. I looked at Castor (also written in rust), this time a GUI and it was not bad. I continued to be intrigued by gemini and suddenly I stumbled upon this gem of a GUI client Lagrange. It is written in C and it looks amazing. At least compared to anything else I saw so far. It is very similar to a traditional web browser and already has a plethora of functionality. Detailed preferences, side-panes, themes, adjustable shortcuts and much more. I can hardly believe just one guy made this. It feels like this is how the internet should have been, lol. I am sure that other amazing clients and technology will continue to pop up around gemini, but it is time to make a short \u0026ldquo;how to\u0026rdquo; for any friends or average users who would like to try this out.\nSo go on! Try it \u0026lt;3\nHow to This how to will get old very quickly, I am just recommending what I did yesterday. Very likely, there will be even better clients and even better hosting options in the future. But for now, I was quite amazed by what is already available right now. This is the quick and simple way:\nGet a client, have a look  Lagrange release page\n  Windows: From the link above, get the latest setup.exe (time of writing: \u0026ldquo;lagrange_v1.2.2_windows-x64_setup.exe\u0026rdquo;)\n  Linux: You can get the AppImage from the link above if you want just a quick test. But I recommend to get the flatpak. On my LinuxMint, I install it directly from the software manager, just search for \u0026ldquo;Lagrange\u0026rdquo;.\n  Make your own page We will publish our page on a free sourceHut account. Source guide.\nCreate a sourcehut account  Register an email here. Your username will be part of the page \u0026lt;username\u0026gt;.srht.site Click the confirmation you get via email  Create a sourcehut token  Generage token here - don\u0026rsquo;t close the page! Copy the generated token and save it to a text file for later use!  Make a index.gmi text file with: # My sourcehut capsule Welcome to my cool sourcehut capsule!  Make a \u0026ldquo;tarball\u0026rdquo; I guess you can run this command in windows too. If not, find out how to make a \u0026ldquo;tarball\u0026rdquo; a .tar.gz on your system.\nJust a single file for your first test:\ntar -cvz index.gmi \u0026gt; site.tar.gz  Or a whole directory public, where the files can link to each other. You could add a line to your index.gmi that just says \u0026ldquo;=\u0026gt; /page.gmi Link to another page?\u0026rdquo; (the file name is separated by just a space from the link text) and make a page.gmi file next to it. Than package the whole directory with:\ntar -C public -cvz . \u0026gt; site.tar.gz  Upload the package Substitute your access token and username.\ncurl --oauth2-bearer \u0026quot;access token\u0026quot; \\ -Fcontent=@site.tar.gz \\ -Fprotocol=GEMINI \\ https://pages.sr.ht/publish/username.srht.site  Done! After this you should be able to visit your page on username.srht.site from the Lagrange client.\nLink to it (optional) If you already have a hosted website like I have here radim.xyz. You can just:\n Go to your domain registrar Go to DNS records Subdomains (CNAME) Add \u0026ldquo;gem\u0026rdquo;, \u0026ldquo;gmi\u0026rdquo;, or any subdomain you find appropriate. Im not aware of any standards for that yet. Point it to pages.sr.ht. This is not a typo (including the dot at the end). If you put there pages.sr.ht. or username.srht.site, they both resolve via dns to the same IP. After your client connects to that IP, it asks sr.ht for the specific address of your \u0026ldquo;capsule\u0026rdquo; and that is known via the last line in your publishing step in the curl command. So after this, you still have to re-publish with the curl command, but change the \u0026ldquo;username.srht.site\u0026rdquo; to your final desired page. After this step, both addresses should still resolve in the client. Your previous usernam.srht.site (because that is generated by the account) and the now new linked address from you CNAME.  Pretty cool right?\nTerminal troubleshooting tools Test request If you want to call a request for the page from the terminal, like you would with a `curl -X GET' - that won\u0026rsquo;t work for gemini. After a bit of searching, the only way so far for gemini I know is:\necho -e \u0026quot;gemini://gemini.circumlunar.space/docs/\\r\u0026quot; | ncat --ssl gemini.circumlunar.space 1965  This will return the text as is on the page.\nTest DNS If you wanna check the dns resolution in terminal, I always use nslookup. It is not specific for gemini. For any srht.site it should return 173.195.146.139 at time of writing.\nnslookup srht.site  ","date":1615075200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1615075200,"objectID":"9837f67371457c2b67a6bebd287441cc","permalink":"/project/gemini/","publishdate":"2021-03-07T00:00:00Z","relpermalink":"/project/gemini/","section":"project","summary":"How to make a simple gemini page.","tags":["Code"],"title":"Gemini","type":"project"},{"authors":null,"categories":null,"content":"Motivation and lessons learned My first attempt of an agent based simulation model. The agents themselves are purely random in their behavior, which can make this project look incomplete. But the purpose of this exercise was to see if I can even manage to set it up and get it working.\nI did this over the weekend and got allot of new experience thanks to it. I got to try out structopt a cli input tool which I absolutely love and can\u0026rsquo;t recommend enough. I also tried out Rayon for the first time. It was a good experience to fixing structs so that they become \u0026ldquo;send\u0026rdquo;. But in the end, rayon didn\u0026rsquo;t improve the performance of my particular code. It would require further deeper analysis to find out why exactly, but my very simple \u0026ldquo;benchmark\u0026rdquo; is bellow. Again, it was rather about the experience than about making the fastest possible multithreaded implementation possible.\nThe probably biggest experience I got out of this exercise was the use of Rc, RefCell and weak links.\nWhen one agent needs to mutate another (tag) another. How can one object in a Vec change the one next to it. It has been a while since I was using RCs. But you can\u0026rsquo;t give a normal mutable ref to them, so I just tried it with RCs and thought it should be ok. I encountered a huge block and was totally lost when that didn\u0026rsquo;t work and I didn\u0026rsquo;t understand why. After a while, I found an example using weak links. I never used those before, but I gave it a try. I realized why I\u0026rsquo;m getting the error about the RC being already borrowed. Through the first RC I get to the Agent itself, and then I\u0026rsquo;m trying again to use the same RC from inside the Agent - that was the issue. This got solved by cloning the agent with its owned link. Thereby dropping the initially established connection. Now I can use the link from inside the cloned Agent. This works, but somehow it it doesn\u0026rsquo;t feel right. I still remember writing this code and I felt dirty. But the next challenge was right around the corner. When you try to print out sch an agent, it will try to resolve its link to the parent, finding again the same child, resolving it\u0026rsquo;s link to the parent and so on. With that I got possibly my first stack overflow in Rust. You can imagine my frustration at this point, I was still lost. But fortunately getting back to those weak links and the example in the Book solved this issue. A weak link doesn\u0026rsquo;t resolve immediately, causing this loop, but needs to be called explicitly. And it should be possible to call it, since it\u0026rsquo;s called from a clone, who\u0026rsquo;s link is not used anymore at that moment. This way, any time the link is used, a clone is being made. I still don\u0026rsquo;t know about a better solution. After this started working, I felt like getting away with murder and somehow still not happy, but at least with hope that I could finish this exercise.\nLater when I changed the Rc for Arc, this loop issue solved with weak links became not necessary anymore. Since you have to lock Mutex also explicitly. But well, was still a good experience.\nSimulation rules Movement All agents move on every tic one space in one of their neighboring directions (up, down, left right) on random. If they cross a wall, they pop out on the other side.\nTagging At the start, one agent is chosen as \u0026ldquo;it\u0026rdquo; on random. If and another agent come next to each other (on one of the four directions) the tag is exchanged. The previously tagged agent becomes impossible to tag again, until another tag is exchanged.\nBuild cargo build --release  Run The most interesting use of this piece of code at this moment, is to see how the amount of exchanged tags can change when changing the options of the world. With the flags bellow, it is very easy to adjust the size of the world, the number of agents and how many moves they make.\n  Either the build result from the previous step.\ncd target/release/ ./agent-tag    Or through cargo\ncargo run    add flags to the cargo format after --\ncargo run -- -h      Options Please see the flags and options bellow. All of them have sensible defaults, so just running the program without any should give you still a reasonable result.\nHelp text agent-tag --help  agent-tag 0.1.0 A tag game simulator with stupid agents USAGE: agent-tag [FLAGS] [OPTIONS] FLAGS: -d, --disable-grid Adding this flag disables the output of the field (grid). For benchmarking, when printing the grid on the cli is not required -h, --help Prints help information -p, --print-announce During a run, announce that in the next visible frame, a tag will occur. Otherwise it is easy to miss it -V, --version Prints version information OPTIONS: -a, --agents \u0026lt;agents\u0026gt; Number of agents [default: 40] -m, --moves \u0026lt;moves\u0026gt; Number of moves (tics) before the program finishes. Important for benchmarking, otherwise a simple kill ^C works too [default: 10] -s, --size \u0026lt;size\u0026gt; Size of field (grid) [default: 25] -t, --time \u0026lt;time\u0026gt; Number of ms between tics [default: 1000]  Very simple benchmark Just running time (the common linux tool). This example runs with 10.000 moves. When -t0 is set, there is no thread sleep called between the moves. Toggling the -d flag shows how much time is spent on the graphical aspect of the program.\ntime target/release/agent-tag -t0 -m10000 -d  Without Rayon:\n________________________________________________________ Executed in 19,63 millis fish external usr time 19,61 millis 528,00 micros 19,08 millis sys time 0,21 millis 215,00 micros 0,00 millis  with Rayon:\n________________________________________________________ Executed in 155,57 millis fish external usr time 1208,72 millis 748,00 micros 1207,97 millis sys time 541,37 millis 0,00 micros 541,37 millis  The results are surprising. The refactor from Rc to Arc (and giving each agent it\u0026rsquo;s own RNG) didn\u0026rsquo;t slow down the run much. But when then used with Rayon, to use more threads for the many agents, the release binary actually ran 4x slower. Even when raising the number of agents from 40 to 400, the binary without Rayon (single threaded) was 4x faster. Sometimes the results can vary allot based on use case and that\u0026rsquo;s why these tests can be so useful when implementing parallelism. I left the two tested functions commented in the code with \u0026ldquo;# Raion\u0026rdquo;\nRunning just time is not a perfect benchmarking tool, especially for results under a second. But good enough for rough comparisons between different setups I guess.\n","date":1614988800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1614988800,"objectID":"453458fc4a3f552b877f81930a69d798","permalink":"/project/agent_tag/","publishdate":"2021-03-06T00:00:00Z","relpermalink":"/project/agent_tag/","section":"project","summary":"A tag game simulator with simple agents.","tags":["Code","Rust"],"title":"Agent based simulation modeling","type":"project"},{"authors":null,"categories":null,"content":"Motivation Searching for a frontend experience During my day job I work with APIs, databases and general backend code. Last time I did anything frontend related were tutorials and small projects with react around 2018. So I decided to do something frontend UI related and interesting. My tendency was to use rust and my first idea was to make a regular desktop app with gtk3. I thought that making a board game grid would be a good and simple enough idea. I was fiddling around with GTK3 in Glade, which is a great tool, and was learning about basic graphical setups with Cairo. But it was all still too new to me and I gave up on making a board with Cairo. But regular desktop apps with GTK3 are a great choice for Rust too it seams. I might do something with that in the future.\nA few days later I stumbled upon a nice new blog post about a full featured frontend web framework with rust and WebAssembly using Yew. I heard about Yew before so it caught my attention. I started thinking about how I would make a game grid using css.\nDevelopment process CSS So I did the grid with css. This part is always tedious, especially when not doing it often, but it worked. I decided that I would simply make the grid lines not visible, put the goban picture as a scalable background, and the stones as images inside the grid fields. In the end, all the pictures I used are png. It would be better with svg, but as a proof of concept this is good enough.\nYew I read through the short docs on Yew. It took me a while to realize that the recommended examples on their github are described in their \u0026ldquo;next\u0026rdquo; version of the docs, where they recommend trunk for building the wasm/js bindings. Even the few months old blog post is using a different process. One can really feel that this is still an evolving technology. At the same time, one clearly sees how much better and easier the building process got, from the older tools mentioned in the yew docs all the way to the quite new trunk crate. I can say that using trunk was a breeze. Bellow I write down the common commands and it should be obvious how intuitive and strait forward it is. This was definitely a pleasant and appreciated surprise, since I remember reading some months ago that the rust wasm packaging for javascript was quite tedious.\nYew as a framework itself was also a pleasant surprise.\n  It is very similar to react, so the concepts were very easy to pick up.\n  There were almost zero issues regarding fighting with the compiler.\n  I write TypeScript every day at work and since it\u0026rsquo;s just a superset of JavaScript, it\u0026rsquo;s a syntax that lets you get away with allot. So you tend to write the code fast, but later you have to search for bugs if they arise. This is a feature not a bug. Websites are not rocket engines. Employers don\u0026rsquo;t want to spend 5x the amount of money/time to put the same buttons on the screen, just because there could be less time needed for bug fixing. I totally understand this and that is why nobody expected rust to be a viable frontend language. I am not an expert on this topic to present some definite answer. But what I am trying to say, is that I expected much more pain and surprisingly there was none. Not even a little, really none. Well actually, there was 1 compiler error. I wrote down the short 80 lines of code that create the logic of putting stones into the grids and the one and only compiler error I had was that I didn\u0026rsquo;t use the \u0026ldquo;move\u0026rdquo; command before the closure. It took a moment to realize why it is necessary, but even without the realization, the compiler itself suggested to solve it that way. Prior to writing the 80 lines, I also took some inspiration from the game_of_life example. That also helped.\nGimp Now I had a clickable board, placing a dummy image into a grid. Proof of concept achieved! Felt good, but this doesn\u0026rsquo;t look like a goban at all. The time came to get rid of the cell borders and somehow fit bellow them a goban grid, where the stones have to sit on the intersections, not in the fields. In the total beginning, I tried to make that somehow work with lines drawn with CSS, but I didn\u0026rsquo;t find a way how to make that work. I think having one grid virtual and using it for stone pictures and the other grid as a background picture is still a good solution.\nAs a big linux and libre-software enthusiast, I spent a few weeks last year learning some gimp basics. That came incredibly in handy at this moment. There are surprisingly many great free sources of gimp tutorials. Among other there is for example the excellent daviesmediadesign.\nI need only two things on two layers. A good wood (ideally pine) pattern, and a grid. Finding the wood pattern was surprisingly a bigger challenge than I expected. Writing this article is already much more time than I wanted to spend on pattern acquisition. I couldn\u0026rsquo;t find a free external gimp pattern and I also couldn\u0026rsquo;t find an appropriate good and free pine wood picture. This is just a concept. I wanna get something slightly better than making the background plain yellow. In the end I used a gimp preinstalled pattern. There are 13 wood patterns and they all look horrible, with the exception of one, my savior called just \u0026ldquo;pine\u0026rdquo;. I put it on a 1920x1920 canvas and the result was surprisingly good.\nThan View \u0026gt; Show guides, Image \u0026gt; Guides \u0026gt; New by percent. One horizontal, one vertical, and you have the grid middle. A simple google search for drawing grids in gimp told me that there is a tool for it under Filters \u0026gt; Render \u0026gt; Pattern \u0026gt; Grid. It also has a \u0026ldquo;offset\u0026rdquo; property, that allowed me to shift the grid perfectly into the center of the guides, while making appropriate space on the border.\nThe overflowing grid lines on the border were cut with a layer mask. The dots were painted individually by hand with the pencil tool.\nAnd thats it. Export as png. Than just a few google searches for some large go stone pictures. I found surprisingly good ones. And thats it. Add everything into the CSS and I was blown away how great the result looked, compared to how little time and prior experience it took.\nThe center of both grids were aligned nicely, but as expected, there were some misalignment issues on the edges. That was nicely solved by having in the css box-sizing: border-box; where a dynamic padding: calc(var(--size) / 90); shrinks the invisible grid inwards, perfectly fitting the png under it. Holding with any scale of the window. Wonderful!\nExternal Goban library Now I had a perfectly looking 5-in-a-row game. Almost go. Still I thought lets push just a little more. I want to at least capture the stones. That is no trivial matter. I could try writing this logic by myself, but previously I found this great library that was just under development with only days after the last commit.\nI spent some time reading through it, trying to understand it and thinking how to fit it onto my existing code. In the end, I found that he stores the stone values also simply in a vector. Just how I did previously. Than simply mapping them as DIVs into the grid container. I got that out with his \u0026ldquo;.raw()\u0026rdquo; method. Mapped that on the board and suddenly I was able to capture my stones! It was like magic. The magic of open source, haha. I found a tiny bug, reported it to him, and he even fixed it in a few short hours. I feel the love for go and code connecting us, haha.\nI added the right panel that shows captured stones and I could add much more still. And maybe I will in the future, but for now I feel like the project\u0026rsquo;s purpose was achieved.\nA frontend written purely in rust, under 80 lines of code in main.rs. Compiled to WebAssembly. Sitting relaxed on my website. It was a great experience and I had many pleasant surprises.\nPlease feel free to click on the link on the top of this page and place a stone or two.\n Install install the build tools cargo install trunk wasm-bindgen-cli   Trunk is really amazing. At the time of writing it is recommended only in the non-stable version of the yew documentation. Trunk mentions that in the future, the wasm-bindgen-cli package will be installed as part of trunk.  install the rust wasm toolchain rustup target add wasm32-unknown-unknown   Otherwise trunk build won\u0026rsquo;t go through.  Development Build trunk build   This creates the /dist folder. Under the hood it also runs cargo build that creates the /target folder. So you can still normally use cargo\u0026rsquo;s check, build or clippy for checking code.  Static files: The folder /static and its contents are copied via trunk automatically to /dist thanks to this line in index.html:\n\u0026ldquo;\u0026lt;link data-trunk rel=\u0026quot;copy-dir\u0026quot; href=\u0026quot;static\u0026quot;/\u0026gt;\u0026rdquo;  Build, view and rebuild code on the fly trunk serve  Sharing the result   To cut the total size, get a clean output folder (if previous builds were made). This deletes the ./dist folder.\ntrunk clean    Make a new optimized build.\ntrunk build --release  If you want to run the html directly, for example on a different system, just launching index.html from ./dist/ won\u0026rsquo;t work! If you need to use the index.html directly (for example in a link on your web), you have to change the 3 addresses for the .css, .js and .wasm inside. That is what I did on this web. Otherwise by default it is searching for them in root.\n  But locally the simplest way is to serve the folder:\n  take the content of ./dist/ and serve it with any of these:\n  rust tool:\nminiserve ./dist --index index.html    npm (nodejs) tool:\nhttp-server ./dist    usually present by default on linux (run from inside the folder):\npython3 -m http.server      ","date":161136e4,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":161136e4,"objectID":"b47cf9b020f983fe25c585799b1266ff","permalink":"/project/yewban/","publishdate":"2021-01-23T00:00:00Z","relpermalink":"/project/yewban/","section":"project","summary":"Frontend in Rust🦀️ and WebAssembly.","tags":["Code","Rust","Go"],"title":"Yewban","type":"project"},{"authors":null,"categories":null,"content":"A new language When I started learning Rust in the second half of 2019, I first read \u0026ldquo; The Book\u0026rdquo; from the official website. I can highly recommend it. It takes a little longer to get going and many people prefer to go right into writing code, but my first step into this very new territory was intentionally cautious and thorough. I spent my fair share of time on the book.\nAfter the basics There is also \u0026ldquo;Rust by example\u0026rdquo; which is more hands on. I went through it after reading the book relatively quickly, it is also very well made. At this stage jumping on some exercises is the perfect time. Experimenting with different approaches to new problems and fighting the typical hurdles of a new programming language is ideal. Rust especially has a slightly higher learning curve than other languages that try to be more similar to each other. On the other hand, I only spent a lot of time on JavaScript before Rust, so I went into it with a still rather flexible mind. I\u0026rsquo;m sure that helped allot.\nWhere to exercise When learning JavaScript, I also used to do some exercises on pages like codecademy.com, codingame.com and codewars.com. All of them are wonderful and totally free options for beginners. Especially codewars seamed to provide close to unlimited content and a great way how to compare solutions with others. It\u0026rsquo;s really amazing how many good and free options there are to learn and improve at coding.\nExercism In the Rust community, I heard recommendations about exercism.io. That\u0026rsquo;s where I first found the page. I can\u0026rsquo;t praise this website enough. I spent a few months around the end of 2019, doing exercises in Rust several times a week. At that time, I was able to get real reviews by mentors on the page, guiding me through the solutions. Later when the language became more popular, there were not enough mentors to give direct reviews. It was still possible to progress through an \u0026ldquo;unguided\u0026rdquo; track though and compare your solutions to those from other users.\nFinal thoughts By the time of writing, I don\u0026rsquo;t spend much time on Rust anymore. I have two other goals that I want to reach by the end of the year. But If I get the itch to play around with some Rust again, I still left some untouched exercises on the page and I\u0026rsquo;m sure I would have some good fun with it, while also learning some new practices and ways to think about coding.\nPS At the beginning on this website, the picture slider, the second picture that is saying \u0026ldquo;Developer\u0026rdquo;. That background was my own screenshot, a little edited in gimp, from one of my last exercises on exercism.\n  ","date":1597017600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597017600,"objectID":"e8432fc0035be9273bd7b87768bf78d5","permalink":"/project/exercism/","publishdate":"2020-08-10T00:00:00Z","relpermalink":"/project/exercism/","section":"project","summary":"Exercises are a great way how to start learning a new language.","tags":["Code","Rust"],"title":"Exercism.io","type":"project"},{"authors":null,"categories":null,"content":"DB experience During my 2 years of self study between 2017-2019, I spent a few months studying MongoDB. At that time, it was recommended as a good technology for the web. I knew some basic SQL, and I spent some time with SQLite in a Python project tutorial during my study, but MongoDB was a database that I really put in some effort and finished the free certificates that they have on their official website. I have to say that I like MongoDB, and I was lucky to find my current company starting 2019, where MongoDB is used exclusively.\nDay job Most of my work is focused on the backend of a big portal website for users and admins. Specifically, the creation and maintenance of APIs. Written in TypeScrip, stored in MongoDB and served with GraphQL. GraphQL was new to me when I started in the company, but once I got used to it, serving data via REST feels like some totally antiquated. Of course, we also use REST for necessary things, but the type safety of GraphQL and the schemas is something amazing.\nRust During 2019, I wanted to learn a new programming language. Most of my time 2017-2019 I spent learning JavaScript. I spent a some time on C and Python too. I like python, but I already did a small project with it, some intermediate tutorials, and although I definitely could learn much more in Python, It didn\u0026rsquo;t really feel challenging enough and I wanted something that would push my knowledge as a developer. C was interesting, but way too hard for me to spend too much time on it. I wanted something practical and modern. The purpose was to learn to be a better programmer, but I felt like I would spend too much time on suffering while trying to build something in C. A colleague at work started to learn GOlang a little. I felt tempted to read up on it a little and stumbled upon this wave of new programming languages growing in 2019 like go, rust or julia. Julia felt too esoteric to me and GO somehow too popular to be cool. But when I was reading about Rust and their attempt to make memory management like in C accessible and safe for even beginner programmers, I was very intrigued. I don\u0026rsquo;t regret my choice in Rust a bit. It was exactly what I was looking for. Something more challenging on a technical level, but also holding your hand in the process, making for a great learning experience.\nFirst I read \u0026ldquo;The book\u0026rdquo; from the official website. The book took a while, but it is very good. I prefer taking my time while studying anything and go step by step a bit every day. So I didn\u0026rsquo;t mind the length of the book. After maybe a few months, I started with tutorials on Exercism. It is an amazing website and I might make an article about it exclusively in the future.\nProject After a few weeks / months of tutorials, I felt the need to try something personal. It doesn\u0026rsquo;t need to be something production-ready, I just wanted to try to put together something new. I soon began thinking if my favorite MongoDB + GraphQL could work with Rust. I found an article from 2018 that looked a little scary, but when reading the docs of the GraphQL library for Rust, I realized 2018 might be already old information.\nI made the simple web API by the end of 2019. I will not be talking about the technical specifics of the project and its libraries. Under the link above, in the project\u0026rsquo;s readme.md, you can find the technical details. I also left plenty of comments in the code itself for me or anybody else if you are interested. But below are some memories that I have of the experience writing it.\nRust with MongoDB The library for MongoDB could have been better. I remember thinking that using MongoDB in TypeScript with Mongoose is honestly a much better experience. In rust, the objects have to be translated through a parsing library like Serde. But I guess this is not an issue exclusive to Rust, more like a benefit when using JavaScript with JSON. It was not trivial, but possible!\nRust with GraphQL The library for GraphQL on the other hand was surprisingly nice to use. I loved how it used macros and simple Rust structs to generate its necessary objects. It was easy to create the schemas, much nicer than I remembered from the crazy 2018 article. I remember being amazed that I could easily recommend this, even though I\u0026rsquo;m not a programming veteran, and I am writing this in Rust, supposedly one of the fastest and most powerful languages out there.\nFinal thoughts So, I was very happy when this was running. Later I changed the module tree and I implemented logging. Both simply for experience and making the project feel a little more complete, even though this was basically more like a proof of concept. A challenge for myself.\nWould I change it? I imagine that in the past 7 months since then, both libraries got only better. I didn\u0026rsquo;t look at them since then. Also, I had a hard time to choose the web server library. I tried several till I stuck with Iron. Were I to do it over, at this time of writing, I would probably use Actix-web instead. But the library landscape of Rust is evolving quickly and it\u0026rsquo;s no surprise that there are many changes. I will not touch this project again. It serves as the memory of my experience from that time. My first personal github project.\n","date":1596067200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1596067200,"objectID":"f5eb417c72189037285457a1353a6e31","permalink":"/project/graphql_rust/","publishdate":"2020-07-30T00:00:00Z","relpermalink":"/project/graphql_rust/","section":"project","summary":"Creating a GraphQL and MongoDB web API in Rust.","tags":["Code","Rust"],"title":"API in Rust","type":"project"},{"authors":null,"categories":null,"content":"In my company, we are using AKS (Azure Kubernetes Service). With every git commit to the master branch, a new docker image is build and pushed to the repository with CircleCI. It is automatically deployed to the dev cluster. At a controlled release moment, we are then able to release all necessary docker images with their particular versions in one go to the production cluster using helm.\nThe project is quite big and all connected parts are quite complicated in their setup. That\u0026rsquo;s why I wanted to create my own small project and learn how to set up a similar CI/CD (circular integration / circular deployment).\nI did so June 2020. Link to the project above. Journey description below.\nWhat to push First decision was what to build and push. I made a simple website with the static site generator Hugo. It was the first time I made a web with hugo, so this was in itself a very good learning experience. I stuck literary to the \u0026ldquo;quick start\u0026rdquo; guide to not lose too much time with this step, since the page itself is obviously not the goal of this project. But in general, I can only recommend Hugo.\nScript before circle Obviously I wanted to use the same technologies that we are using on the company project. I was eager to get into CircleCI, but I quickly realized that is not the right approach. It turns out that the best approach for me was to leave the CI as the absolute last step. First make a long list of all the cli commands that you find useful. I put most of them in the readme.md of the project. This is not \u0026ldquo;best practice\u0026rdquo; for a readme, but I well, it was meant to be just my personal learning project and I wanted to have the commands visible. Only after you can do everything with your cli commands from beginning to end, then it makes sense to put it in a CI config.\nDocker So first thing, I made my first successful docker image build. After running it with a port-forward and seeing that the Dockerfile took the correct content and I saw the page loaded in the browser, I have to say it feels good.\nbuild image:\ndocker build -t radimj/repo1 .\nrun and forward port to localhost:\ndocker run -d -p 80:80 radimj/repo1\nDocker repository Next step, where to push the image? Unfortunately, you can\u0026rsquo;t treat docker images like ISOs or packages as the word \u0026ldquo;image\u0026rdquo; would suggest. There are command like \u0026ldquo;save\u0026rdquo; and \u0026ldquo;export\u0026rdquo;, you can look up the details yourself, but the main takeaway is that docker images are not meant to be sent around as packaged files. You have to use a repository. I saw guides for creating local repositories, but again, this is not the main purpose dockers exist. You simply should use a remote repository. You can store them on Azure too, but I didn\u0026rsquo;t have a free account there, so I just went with the simplest solution, I made a private DockerHub account.\nAnother a little unexpected process is that you don\u0026rsquo;t add the repository through some \u0026ldquo;add repo\u0026rdquo; or something, you have to docker login. This will hash the login details in ~/.docker/config.json. As far as I know, that is the only place you can find out what repository your docker is using. After that, you have to make sure your image name (tag) that corresponds to your account and repository name, else it wouldn\u0026rsquo;t know where in your repository to add the image. After that, a simple push should work.\npush to docker hub:\ndocker push radimj/repo1\nI\u0026rsquo;m noticing I\u0026rsquo;m being unnecessarily detailed and this project had so many small issues that this would end up being a little book. I will be more concise bellow.\nCircleCI Since I didn\u0026rsquo;t have a remote kubernetes cluster to push to, I was satisfied if my CI would just build the image and push it to the repository. The details of the CI config are in the /.circleci/config.yml you can find it in the project. I kept it as simple as possible. A few notable points:\n Base image\nIt takes a moment to choose a fitting base docker image, that is used for the whole CI process. Docker\nUse docker with \u0026ldquo;- setup_remote_docker\u0026rdquo;. This creates a special environment that the CI uses to work with docker. CLI tool\nCircle CI has a cli tool that lets you run the build locally. This is good to speed up the creation of the config, but don\u0026rsquo;t rely on it too much. For example the \u0026ldquo;setup_remote_docker\u0026rdquo; command didn\u0026rsquo;t work for me with it and I had to use \u0026ldquo;sudo\u0026rdquo; for the docker commands when running the cli localy. SSH into the build\nWhen something breaks only remotely and you don\u0026rsquo;t know why, a last resort is SSH into the CI build. This was an interesting experience. It took a moment to set up, but if you just follow the guide in the docs you should be fine. I managed to get into the docker image that was sitting broken in the remote CI build where I found what was missing.  Being able to set up CircleCI was an empowering experience. CI really gives you the feeling like \u0026ldquo;set up once, never touch again\u0026rdquo;. When you first write it, the \u0026ldquo;never touch again\u0026rdquo; feels very good. But after some time, when you forget why you added this or that line\u0026hellip; \u0026ldquo;never touch again\u0026rdquo; can become scary 😂\nKubernetes Kubernetes can be easily tested with Minikube, or similar tools that run a single node cluster on your local drive. Setting up a production ready Kubernetes on a private server is much harder than I expected. It is not like installing nginx or a machine and expecting it to work. I read there are ways how to do it, but for now that is beyond me. Production ready Kubernetes clusters are best chosen from established providers online. After realizing this, being able to use something like Minikube (or others) is a really amazing thing, since it behaves like a real cluster and is perfect for learning and basic testing.\nIn Kubernetes, everything is about deployment setups within .yaml files. You can write them by hand, or export them from a running deployment / service / pod with \u0026ndash;output yaml. The Kubernetes documentation is quite good, and every single of my steps here is better explained there. So I will not be rewriting the docs here. Rather, I will show you the process how I put brick on brick with small commands to get to a better understanding of the result.\nFirst, you need to set up a secret in kubernetes that will be used for authorization when pulling docker images from repos. I did it from the docker login file:\nkubectl create secret generic regcred \\ --from-file=.dockerconfigjson=\u0026lt;path/to/.docker/config.json\u0026gt; \\ --type=kubernetes.io/dockerconfigjson  That can be tested by running once pod with the secret:\nkubectl run repo1 --overrides='{ \u0026quot;spec\u0026quot;: { \u0026quot;imagePullSecrets\u0026quot;: [{\u0026quot;name\u0026quot;: \u0026quot;regcred\u0026quot;}] } }' --image=radimj/repo1 --port=80 The \u0026ldquo;overrides\u0026rdquo; functionality makes more sense when already knowing how a standard yaml config would look like. It is basically just editing a default one.\nThe following commands give a way how to look into your pod. In my pod there is nginx exposing my website on port 80.\nforward or expose pod:\nkubectl port-forward repo1 8080:80\nkubectl expose pod repo1 --type=\u0026quot;NodePort\u0026quot;\nDeployments and services. I will not give examples how to create them or explain in detail what they are. Consult the official docs for details. But in essence, deployments are a bundle of pods, and services are configs how these resources are exposed on ports. They are created in a similar way like pods. All ideally with yaml files. Once you have them running, you can observe them with these commands.\nexpose deployment:\nkubectl expose deployment circle-deployment --type=LoadBalancer\nnodeport in:\nkubectl get svc kubectl describe service repo1\nexposed on:\n(minikube ip):\u0026amp;nodePort\nKubernetes Yaml management: create new yaml file from:\nkubectl get (deploy / svc / pod ) -o yaml\nrun pod / deployment from yaml:\nkubectl apply --filename private_deploy.yaml\nrevert (delete) from yaml:\nkubectl delete -f private_deploy.yaml\nThis is the roundabout way how to get to your yaml file. But a good learning experience.\nJSON parsing One of the most surprising discoveries on this project was JQ. When you work with Kubernetes or Azure, you get quickly used to large JSON outputs in your terminal. Both tools have inbuilt ways how to make this more manageable. In Kubernetes, you can query most outputs with --output jsonpath=\u0026quot;\u0026quot; this is one of the query languages for parsing json. Azure uses \u0026ldquo;JMESPath\u0026rdquo; which is not the same. Azure also uses --output table heavily, to make things more readable. If you make scripts and you are working only with one tool, then it is probably recommendable to use the inbuilt query parsing tool.\nBut let me tell you, to learn just one way that sits forever in your system, that you can use for any JSON string that enters your command line is a great thing! With JQ I was able to do things like:\ndisplay docker login secret from kubectl:\\\nkubectl get secret regcred \\ --output jsonpath=\u0026quot;{.data.\\.dockerconfigjson}\u0026quot; | \\ base64 --decode | \\ jq \u0026quot;.auths | map(.auth)[0]\u0026quot; -r | \\ base64 --decode  You can see the use of both \u0026ldquo;jsonpath\u0026rdquo; and \u0026ldquo;jq\u0026rdquo; here for comparison. The output tells you exactly what login your kubectl is using. Also, good to understand how the secrets are stored in kubernetes.\nHelm Again, I won\u0026rsquo;t go into details, this post is long enough. But simply put, helm is a bundle of kubernetes yaml config files, also called \u0026ldquo;manifests\u0026rdquo;. With helm, you can create files that hold variable names and you can distribute these variable through your manifests. This creates a setup where you can have a hundred manifests with thousands of lines, but if they all run together in a setup, you can just put variable names into all of them and then adjust the variable in just one place. Making releases of big projects manageable. This bundle of manifests is called a \u0026ldquo;chart\u0026rdquo; in helm. You can also have full repositories of charts, but I will not be getting into that here.\nlint chart:\nhelm lint circle-chart/\nIn the bellow example, I am packaging the chart folder into a package. This is useful for distribution, but not necessary if you are running it from just one place. You can simply call the commands on the chart folder as well.\nbuild package:\nhelm package circle-chart/\ninstall: (name should be same as package name)\nhelm install circle circle-0.2.0.tgz helm install circle circle-chart/\ncheck release:\nhelm ls\nuninstall totally:\nhelm uninstall circle\nrolling update: The following command changes only necessary pods, it does not update to \u0026ldquo;latest\u0026rdquo; helm upgrade --install circle circle-chart/\nif you want to change \u0026ldquo;latest\u0026rdquo; tags, old way was: helm upgrade --install --recreate-pods circle circle-chart/ new way is to add a random annotation in metadata:\n annotations: # creates a random 5-letter word, causing the pods to be recreated rollme: {{ randAlphaNum 5 | quote }}  Conclusion Setting up a CI/CD flow is not a new thing. Jenkins was released 2011, that\u0026rsquo;s like a millennium in the tech world. The concept of container images is not new either, but it is undeniable that Docker containers are on a big wave right now and related solutions like Kubernetes and Helm are pulled along. In this project, I\u0026rsquo;m showing that anything, when taken piece by piece, can be learned. And why not learn the basics of the biggest wave in the current tech ocean?\n","date":1595203200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1595203200,"objectID":"98874ef52192871c90d0fc5cfcf488f8","permalink":"/project/circle/","publishdate":"2020-07-20T00:00:00Z","relpermalink":"/project/circle/","section":"project","summary":"Creating a simple CircleCI and Docker setup. With focus on Kubernetes and Helm.","tags":["Code"],"title":"Circle CI/CD","type":"project"},{"authors":null,"categories":null,"content":"I started my linux journey February 2018 with linux mint. Half a year later I knew that this is the system for me and I felt an obligation to give back to the community something. I wasn\u0026rsquo;t ready yet to contribute code to some specific project, but there was one thing that put me in a special category. I am using Japanese input on the pc sometimes and when it became broken in Linux Mint 19, I felt an opportunity to contribute. Also, I never made a YouTube video before and I wanted to learn a little about video editing on linux.\nFor the desktop capture I used OBS studio. This is probably the by far the easiest and best choice. There is also \u0026ldquo;simple screen recorder\u0026rdquo;, which will do the job if you don\u0026rsquo;t need to manage any windows and you want only a \u0026ldquo;simple screen recording\u0026rdquo; as the name suggests. But chances are, especially if you want to continue making videos, OBS is the better choice and it is simple enough to use even for simple recordings.\nThe bigger question was what video editor to use. Here the answer is much less clear cut (pun intended). The top free recommendations, in this order, are probably Kdenlive and Shotcut. If for some reason both don\u0026rsquo;t work for you well, there are many other options. Another simple editor is OpenShot, which I didn\u0026rsquo;t like too much, or also \u0026ldquo;DaVinci resolve\u0026rdquo;, which got very popular, but is catered more towards professional editing with emphasis on color adjustment and might be more than you need for simple video cutting. If you google \u0026ldquo;free video editors\u0026rdquo; you will get a plethora of top 10s, but take them always with a grain of salt. There is always bias in those rankings.\nIn my case, Kdenlive did the job well. I just edited some small parts, added a fitting free music track into the background and rendered.\nIn conclusion, were I to redo the video today, I would still use the same tools, but I would do it on a better machine. Preferably with a good microphone. It was done on an old laptop, and recording while running a virtual machine can be an issue. I would also make more small recording/edit samples, to make sure that the final result will have a high resolution, which mine was lacking. Also, a lesson was, that when doing a video, where text is of importance, it\u0026rsquo;s always better to scale up system text, to make it more visible to viewers.\n   \nPS: The main bug that convinced me to make the video was announced to be fixed just a couple of days after my video was done. I was pleasantly surprised that this issue didn\u0026rsquo;t go unnoticed by the developers. I talked briefly with Clem, the main developer of Linux Mint and tested the fix when the beta came out. The video is not only about the installation and bug fix, but talks also about how to setup and use the Japanese input, so I think it can still be useful and I kept it online.\n","date":1595030400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1595030400,"objectID":"1c56f4bb1407eb68b25dc256493ae0e5","permalink":"/project/video/","publishdate":"2020-07-18T00:00:00Z","relpermalink":"/project/video/","section":"project","summary":"Dabbling in video editing on linux.","tags":["Linux"],"title":"Making a video","type":"project"},{"authors":null,"categories":null,"content":"Go has been for a long time one of my big passions. When I was still living in Děčín, the town where I grew up in, I managed to set up a club, where a few members were meeting once a week to learn, play and discuss go together. I also did a few presentations about go (its history and rules) in high schools, local festivals and tea houses.\nDuring 2011-2014 we were holding a nationwide tournament every Spring. Below are a few pictures. Especially the tournament 2013 was important, as it was the qualification for that year\u0026rsquo;s national championship. We hosted a few international players from neighboring countries and had a small column in the local newspaper about it.\nLater 2014, after I got back from my 6-month exchange student program in South Korea, I moved to Prague for a better job. I left the go club that I started in my hometown, but I will always remember those years with joy. I am very proud that I could spread the love of go in my hometown, but also that I was able to give back and support a little the go community in my country.\nTournaments (2010 - 2014)             Club activities (2007 - 2014)         ","date":1594684800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594684800,"objectID":"1198ce62c4940df230a9c3deeabf6166","permalink":"/project/go_club/","publishdate":"2020-07-14T00:00:00Z","relpermalink":"/project/go_club/","section":"project","summary":"A look into my humble go evangelism in my younger years.","tags":["Go"],"title":"Go club and Tournament organization","type":"project"}]