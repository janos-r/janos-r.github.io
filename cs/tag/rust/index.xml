<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust | Radim</title>
    <link>/cs/tag/rust/</link>
      <atom:link href="/cs/tag/rust/index.xml" rel="self" type="application/rss+xml" />
    <description>Rust</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>cs</language><lastBuildDate>Sat, 23 Jan 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hub89e7b28a6abff2b4ec084e6c0608a00_13774_512x512_fill_lanczos_center_2.png</url>
      <title>Rust</title>
      <link>/cs/tag/rust/</link>
    </image>
    
    <item>
      <title>Yewban</title>
      <link>/cs/project/yewban/</link>
      <pubDate>Sat, 23 Jan 2021 00:00:00 +0000</pubDate>
      <guid>/cs/project/yewban/</guid>
      <description>&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;
&lt;h4 id=&#34;searching-for-a-frontend-experience&#34;&gt;Searching for a frontend experience&lt;/h4&gt;
&lt;p&gt;During my day job I work with APIs, databases and general backend code. Last time I did anything frontend related were tutorials and small projects with react around 2018. So I decided to do something frontend UI related and interesting. My tendency was to use rust and my first idea was to make a regular desktop app with gtk3. I thought that making a board game grid would be a good and simple enough idea. I was fiddling around with GTK3 in Glade, which is a great tool, and was learning about basic graphical setups with Cairo. But it was all still too new to me and I gave up on making a board with Cairo. But regular desktop apps with GTK3 are a great choice for Rust too it seams. I might do something with that in the future.&lt;/p&gt;
&lt;p&gt;A few days later I stumbled upon a nice new 
&lt;a href=&#34;http://www.sheshbabu.com/posts/rust-wasm-yew-single-page-application/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;blog post&lt;/a&gt; about a full featured frontend web framework with rust and WebAssembly using 
&lt;a href=&#34;https://yew.rs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Yew&lt;/a&gt;. I heard about Yew before so it caught my attention. I started thinking about how I would make a game grid using css.&lt;/p&gt;
&lt;h2 id=&#34;development-process&#34;&gt;Development process&lt;/h2&gt;
&lt;h3 id=&#34;css&#34;&gt;CSS&lt;/h3&gt;
&lt;p&gt;So I did the grid with css. This part is always tedious, especially when not doing it often, but it worked. I decided that I would simply make the grid lines not visible, put the goban picture as a scalable background, and the stones as images inside the grid fields. In the end, all the pictures I used are png. It would be better with svg, but as a proof of concept this is good enough.&lt;/p&gt;
&lt;h3 id=&#34;yew&#34;&gt;Yew&lt;/h3&gt;
&lt;p&gt;I read through the short docs on 
&lt;a href=&#34;https://yew.rs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Yew&lt;/a&gt;. It took me a while to realize that the recommended examples on their github are described in their &amp;ldquo;next&amp;rdquo; version of the docs, where they recommend 
&lt;a href=&#34;https://crates.io/crates/trunk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;trunk&lt;/a&gt; for building the wasm/js bindings. Even the few months old blog post is using a different process. One can really feel that this is still an evolving technology. At the same time, one clearly sees how much better and easier the building process got, from the older tools mentioned in the yew docs all the way to the quite new trunk crate. I can say that using trunk was a breeze. Bellow I write down the common commands and it should be obvious how intuitive and strait forward it is. This was definitely a pleasant and appreciated surprise, since I remember reading some months ago that the rust wasm packaging for javascript was quite tedious.&lt;/p&gt;
&lt;p&gt;Yew as a framework itself was also a pleasant surprise.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;It is very similar to react, so the concepts were very easy to pick up.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There were almost zero issues regarding fighting with the compiler.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I write TypeScript every day at work and since it&amp;rsquo;s just a superset of JavaScript, it&amp;rsquo;s a syntax that lets you get away with allot. So you tend to write the code fast, but later you have to search for bugs if they arise. This is a feature not a bug. Websites are not rocket engines. Employers don&amp;rsquo;t want to spend 5x the amount of money/time to put the same buttons on the screen, just because there could be less time needed for bug fixing. I totally understand this and that is why nobody expected rust to be a viable frontend language. I am not an expert on this topic to present some definite answer. But what I am trying to say, is that I expected much more pain and surprisingly there was none. Not even a little, really none. Well actually, there was 1 compiler error. I wrote down the short 80 lines of code that create the logic of putting stones into the grids and the one and only compiler error I had was that I didn&amp;rsquo;t use the &amp;ldquo;move&amp;rdquo; command before the closure. It took a moment to realize why it is necessary, but even without the realization, the compiler itself suggested to solve it that way. Prior to writing the 80 lines, I also took some inspiration from the 
&lt;a href=&#34;https://github.com/yewstack/yew/tree/master/examples/game_of_life&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;game_of_life&lt;/a&gt; example. That also helped.&lt;/p&gt;
&lt;h3 id=&#34;gimp&#34;&gt;Gimp&lt;/h3&gt;
&lt;p&gt;Now I had a clickable board, placing a dummy image into a grid. Proof of concept achieved! Felt good, but this doesn&amp;rsquo;t look like a goban at all. The time came to get rid of the cell borders and somehow fit bellow them a goban grid, where the stones have to sit on the intersections, not in the fields. In the total beginning, I tried to make that somehow work with lines drawn with CSS, but I didn&amp;rsquo;t find a way how to make that work. I think having one grid virtual and using it for stone pictures and the other grid as a background picture is still a good solution.&lt;/p&gt;
&lt;p&gt;As a big linux and libre-software enthusiast, I spent a few weeks last year learning some gimp basics. That came incredibly in handy at this moment. There are surprisingly many great free sources of gimp tutorials. Among other there is for example the excellent 
&lt;a href=&#34;https://www.daviesmediadesign.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;daviesmediadesign&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I need only two things on two layers. A good wood (ideally pine) pattern, and a grid.
Finding the wood pattern was surprisingly a bigger challenge than I expected. Writing this article is already much more time than I wanted to spend on pattern acquisition. I couldn&amp;rsquo;t find a free external gimp pattern and I also couldn&amp;rsquo;t find an appropriate good and free pine wood picture. This is just a concept. I wanna get something slightly better than making the background plain yellow. In the end I used a gimp preinstalled pattern. There are 13 wood patterns and they all look horrible, with the exception of one, my savior called just &amp;ldquo;pine&amp;rdquo;. I put it on a 1920x1920 canvas and the result was surprisingly good.&lt;/p&gt;
&lt;p&gt;Than View &amp;gt; Show guides, Image &amp;gt; Guides &amp;gt; New by percent. One horizontal, one vertical, and you have the grid middle. A simple google search for drawing grids in gimp told me that there is a tool for it under Filters &amp;gt; Render &amp;gt; Pattern &amp;gt; Grid. It also has a &amp;ldquo;offset&amp;rdquo; property, that allowed me to shift the grid perfectly into the center of the guides, while making appropriate space on the border.&lt;/p&gt;
&lt;p&gt;The overflowing grid lines on the border were cut with a layer mask. The dots were painted individually by hand with the pencil tool.&lt;/p&gt;
&lt;p&gt;And thats it. Export as png. Than just a few google searches for some large go stone pictures. I found surprisingly good ones. And thats it. Add everything into the CSS and I was blown away how great the result looked, compared to how little time and prior experience it took.&lt;/p&gt;
&lt;p&gt;The center of both grids were aligned nicely, but as expected, there were some misalignment issues on the edges. That was nicely solved by having in the css &lt;code&gt;box-sizing: border-box;&lt;/code&gt; where a dynamic &lt;code&gt;padding: calc(var(--size) / 90);&lt;/code&gt; shrinks the invisible grid inwards, perfectly fitting the png under it. Holding with any scale of the window. Wonderful!&lt;/p&gt;
&lt;h3 id=&#34;external-goban-library&#34;&gt;External Goban library&lt;/h3&gt;
&lt;p&gt;Now I had a perfectly looking 5-in-a-row game. Almost go. Still I thought lets push just a little more. I want to at least capture the stones. That is no trivial matter. I could try writing this logic by myself, but previously I found 
&lt;a href=&#34;https://crates.io/crates/goban&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this&lt;/a&gt; great library that was just under development with only days after the last commit.&lt;/p&gt;
&lt;p&gt;I spent some time reading through it, trying to understand it and thinking how to fit it onto my existing code. In the end, I found that he stores the stone values also simply in a vector. Just how I did previously. Than simply mapping them as DIVs into the grid container. I got that out with his &amp;ldquo;.raw()&amp;rdquo; method. Mapped that on the board and suddenly I was able to capture my stones! It was like magic. The magic of open source, haha. I found a tiny bug, reported it to him, and he even fixed it in a few short hours. I feel the love for go and code connecting us, haha.&lt;/p&gt;
&lt;p&gt;I added the right panel that shows captured stones and I could add much more still. And maybe I will in the future, but for now I feel like the project&amp;rsquo;s purpose was achieved.&lt;/p&gt;
&lt;p&gt;A frontend written purely in rust, under 80 lines of code in &lt;code&gt;main.rs&lt;/code&gt;. Compiled to WebAssembly. Sitting relaxed on my website. It was a great experience and I had many pleasant surprises.&lt;/p&gt;
&lt;p&gt;Please feel free to click on the link on the top of this page and place a stone or two.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;install&#34;&gt;Install&lt;/h2&gt;
&lt;h4 id=&#34;install-the-build-tools&#34;&gt;install the build tools&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;cargo install trunk wasm-bindgen-cli
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Trunk is really amazing. At the time of writing it is recommended only in the non-stable version of the yew documentation. Trunk mentions that in the future, the &lt;code&gt;wasm-bindgen-cli&lt;/code&gt; package will be installed as part of trunk.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;install-the-rust-wasm-toolchain&#34;&gt;install the rust wasm toolchain&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;rustup target add wasm32-unknown-unknown
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Otherwise &lt;code&gt;trunk build&lt;/code&gt; won&amp;rsquo;t go through.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;development&#34;&gt;Development&lt;/h2&gt;
&lt;h4 id=&#34;build&#34;&gt;Build&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;trunk build
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;This creates the &lt;code&gt;/dist&lt;/code&gt; folder. Under the hood it also runs &lt;code&gt;cargo build&lt;/code&gt; that creates the &lt;code&gt;/target&lt;/code&gt; folder. So you can still normally use cargo&amp;rsquo;s check, build or clippy for checking code.&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;static-files&#34;&gt;Static files:&lt;/h4&gt;
The folder &lt;code&gt;/static&lt;/code&gt; and its contents are copied via trunk automatically to &lt;code&gt;/dist&lt;/code&gt; thanks to this line in &lt;code&gt;index.html&lt;/code&gt;:&lt;br&gt;
&amp;ldquo;&lt;code&gt;&amp;lt;link data-trunk rel=&amp;quot;copy-dir&amp;quot; href=&amp;quot;static&amp;quot;/&amp;gt;&lt;/code&gt;&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;build-view-and-rebuild-code-on-the-fly&#34;&gt;Build, view and rebuild code on the fly&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;trunk serve
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;sharing-the-result&#34;&gt;Sharing the result&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To cut the total size, get a clean output folder (if previous builds were made). This deletes the &lt;code&gt;./dist&lt;/code&gt; folder.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;trunk clean
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make a new optimized build.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;trunk build --release
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want to run the html directly, for example on a different system, just launching &lt;code&gt;index.html&lt;/code&gt; from &lt;code&gt;./dist/&lt;/code&gt; won&amp;rsquo;t work! If you need to use the &lt;code&gt;index.html&lt;/code&gt; directly (for example in a link on your web), you have to change the 3 addresses for the .css, .js and .wasm inside. That is what I did on this web. Otherwise by default it is searching for them in root.&lt;/p&gt;
&lt;p&gt;But locally the simplest way is to serve the folder:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;take the content of &lt;code&gt;./dist/&lt;/code&gt; and serve it with any of these:
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;rust tool:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;miniserve ./dist --index index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;npm (nodejs) tool:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http-server ./dist
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;usually present by default on linux (run from inside the folder):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python3 -m http.server
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Exercism.io</title>
      <link>/cs/project/exercism/</link>
      <pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate>
      <guid>/cs/project/exercism/</guid>
      <description>&lt;h2 id=&#34;a-new-language&#34;&gt;A new language&lt;/h2&gt;
&lt;p&gt;When I started learning Rust in the second half of 2019, I first read &amp;ldquo;
&lt;a href=&#34;https://doc.rust-lang.org/book/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Book&lt;/a&gt;&amp;rdquo; from the official website. I can highly recommend it. It takes a little longer to get going and many people prefer to go right into writing code, but my first step into this very new territory was intentionally cautious and thorough. I spent my fair share of time on the book.&lt;/p&gt;
&lt;h2 id=&#34;after-the-basics&#34;&gt;After the basics&lt;/h2&gt;
&lt;p&gt;There is also &amp;ldquo;Rust by example&amp;rdquo; which is more hands on. I went through it after reading the book relatively quickly, it is also very well made. At this stage jumping on some exercises is the perfect time. Experimenting with different approaches to new problems and fighting the typical hurdles of a new programming language is ideal. Rust especially has a slightly higher learning curve than other languages that try to be more similar to each other. On the other hand, I only spent a lot of time on JavaScript before Rust, so I went into it with a still rather flexible mind. I&amp;rsquo;m sure that helped allot.&lt;/p&gt;
&lt;h2 id=&#34;where-to-exercise&#34;&gt;Where to exercise&lt;/h2&gt;
&lt;p&gt;When learning JavaScript, I also used to do some exercises on pages like 
&lt;a href=&#34;https://codecademy.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;codecademy.com&lt;/a&gt;, 
&lt;a href=&#34;https://codingame.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;codingame.com&lt;/a&gt; and 
&lt;a href=&#34;https://codewars.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;codewars.com&lt;/a&gt;. All of them are wonderful and totally free options for beginners. Especially codewars seamed to provide close to unlimited content and a great way how to compare solutions with others. It&amp;rsquo;s really amazing how many good and free options there are to learn and improve at coding.&lt;/p&gt;
&lt;h2 id=&#34;exercism&#34;&gt;Exercism&lt;/h2&gt;
&lt;p&gt;In the Rust community, I heard recommendations about 
&lt;a href=&#34;https://exercism.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;exercism.io&lt;/a&gt;. That&amp;rsquo;s where I first found the page. I can&amp;rsquo;t praise this website enough. I spent a few months around the end of 2019, doing exercises in Rust several times a week. At that time, I was able to get real reviews by mentors on the page, guiding me through the solutions. Later when the language became more popular, there were not enough mentors to give direct reviews. It was still possible to progress through an &amp;ldquo;unguided&amp;rdquo; track though and compare your solutions to those from other users.&lt;/p&gt;
&lt;h2 id=&#34;final-thoughts&#34;&gt;Final thoughts&lt;/h2&gt;
&lt;p&gt;By the time of writing, I don&amp;rsquo;t spend much time on Rust anymore. I have two other goals that I want to reach by the end of the year. But If I get the itch to play around with some Rust again, I still left some untouched exercises on the page and I&amp;rsquo;m sure I would have some good fun with it, while also learning some new practices and ways to think about coding.&lt;/p&gt;
&lt;h3 id=&#34;ps&#34;&gt;PS&lt;/h3&gt;
&lt;p&gt;At the beginning on this website, the picture slider, the second picture that is saying &amp;ldquo;Developer&amp;rdquo;. That background was my own screenshot, a little edited in gimp, from one of my last exercises on exercism.&lt;/p&gt;








  











&lt;figure &gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/media/slider/code.png&#34; &gt;


  &lt;img src=&#34;/media/slider/code.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;



&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>API in Rust</title>
      <link>/cs/project/graphql_rust/</link>
      <pubDate>Thu, 30 Jul 2020 00:00:00 +0000</pubDate>
      <guid>/cs/project/graphql_rust/</guid>
      <description>&lt;h2 id=&#34;db-experience&#34;&gt;DB experience&lt;/h2&gt;
&lt;p&gt;During my 2 years of self study between 2017-2019, I spent a few months studying MongoDB. At that time, it was recommended as a good technology for the web. I knew some basic SQL, and I spent some time with SQLite in a Python project tutorial during my study, but MongoDB was a database that I really put in some effort and finished the free certificates that they have on their official website. I have to say that I like MongoDB, and I was lucky to find my current company starting 2019, where MongoDB is used exclusively.&lt;/p&gt;
&lt;h2 id=&#34;day-job&#34;&gt;Day job&lt;/h2&gt;
&lt;p&gt;Most of my work is focused on the backend of a big portal website for users and admins. Specifically, the creation and maintenance of APIs. Written in TypeScrip, stored in MongoDB and served with GraphQL. GraphQL was new to me when I started in the company, but once I got used to it, serving data via REST feels like some totally antiquated. Of course, we also use REST for necessary things, but the type safety of GraphQL and the schemas is something amazing.&lt;/p&gt;
&lt;h2 id=&#34;rust&#34;&gt;Rust&lt;/h2&gt;
&lt;p&gt;During 2019, I wanted to learn a new programming language. Most of my time 2017-2019 I spent learning JavaScript. I spent a some time on C and Python too. I like python, but I already did a small project with it, some intermediate tutorials, and although I definitely could learn much more in Python, It didn&amp;rsquo;t really feel challenging enough and I wanted something that would push my knowledge as a developer. C was interesting, but way too hard for me to spend too much time on it. I wanted something practical and modern. The purpose was to learn to be a better programmer, but I felt like I would spend too much time on suffering while trying to build something in C. A colleague at work started to learn GOlang a little. I felt tempted to read up on it a little and stumbled upon this wave of new programming languages growing in 2019 like go, rust or julia. Julia felt too esoteric to me and GO somehow too popular to be cool. But when I was reading about Rust and their attempt to make memory management like in C accessible and safe for even beginner programmers, I was very intrigued. I don&amp;rsquo;t regret my choice in Rust a bit. It was exactly what I was looking for. Something more challenging on a technical level, but also holding your hand in the process, making for a great learning experience.&lt;/p&gt;
&lt;p&gt;First I read &amp;ldquo;The book&amp;rdquo; from the official website. The book took a while, but it is very good. I prefer taking my time while studying anything and go step by step a bit every day. So I didn&amp;rsquo;t mind the length of the book. After maybe a few months, I started with tutorials on Exercism. It is an amazing website and I might make an article about it exclusively in the future.&lt;/p&gt;
&lt;h2 id=&#34;project&#34;&gt;Project&lt;/h2&gt;
&lt;p&gt;After a few weeks / months of tutorials, I felt the need to try something personal. It doesn&amp;rsquo;t need to be something production-ready, I just wanted to try to put together something new. I soon began thinking if my favorite MongoDB + GraphQL could work with Rust. I found an article from 2018 that looked a little scary, but when reading the docs of the GraphQL library for Rust, I realized 2018 might be already old information.&lt;/p&gt;
&lt;p&gt;I made the simple web API by the end of 2019. I will not be talking about the technical specifics of the project and its libraries. Under the link above, in the project&amp;rsquo;s readme.md, you can find the technical details. I also left plenty of comments in the code itself for me or anybody else if you are interested. But below are some memories that I have of the experience writing it.&lt;/p&gt;
&lt;h2 id=&#34;rust-with-mongodb&#34;&gt;Rust with MongoDB&lt;/h2&gt;
&lt;p&gt;The library for MongoDB could have been better. I remember thinking that using MongoDB in TypeScript with Mongoose is honestly a much better experience. In rust, the objects have to be translated through a parsing library like Serde. But I guess this is not an issue exclusive to Rust, more like a benefit when using JavaScript with JSON. It was not trivial, but possible!&lt;/p&gt;
&lt;h2 id=&#34;rust-with-graphql&#34;&gt;Rust with GraphQL&lt;/h2&gt;
&lt;p&gt;The library for GraphQL on the other hand was surprisingly nice to use. I loved how it used macros and simple Rust structs to generate its necessary objects. It was easy to create the schemas, much nicer than I remembered from the crazy 2018 article. I remember being amazed that I could easily recommend this, even though I&amp;rsquo;m not a programming veteran, and I am writing this in Rust, supposedly one of the fastest and most powerful languages out there.&lt;/p&gt;
&lt;h2 id=&#34;final-thoughts&#34;&gt;Final thoughts&lt;/h2&gt;
&lt;p&gt;So, I was very happy when this was running. Later I changed the module tree and I implemented logging. Both simply for experience and making the project feel a little more complete, even though this was basically more like a proof of concept. A challenge for myself.&lt;/p&gt;
&lt;h2 id=&#34;would-i-change-it&#34;&gt;Would I change it?&lt;/h2&gt;
&lt;p&gt;I imagine that in the past 7 months since then, both libraries got only better. I didn&amp;rsquo;t look at them since then. Also, I had a hard time to choose the web server library. I tried several till I stuck with Iron. Were I to do it over, at this time of writing, I would probably use Actix-web instead. But the library landscape of Rust is evolving quickly and it&amp;rsquo;s no surprise that there are many changes. I will not touch this project again. It serves as the memory of my experience from that time. My first personal github project.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
