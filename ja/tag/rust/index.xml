<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rust | Radim</title><link>/ja/tag/rust/</link><atom:link href="/ja/tag/rust/index.xml" rel="self" type="application/rss+xml"/><description>Rust</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>ja</language><lastBuildDate>Sun, 15 Jan 2023 00:00:00 +0000</lastBuildDate><image><url>/images/icon_hub89e7b28a6abff2b4ec084e6c0608a00_13774_512x512_fill_lanczos_center_3.png</url><title>Rust</title><link>/ja/tag/rust/</link></image><item><title>Rusty Woods</title><link>/ja/project/rusty_woods/</link><pubDate>Sun, 15 Jan 2023 00:00:00 +0000</pubDate><guid>/ja/project/rusty_woods/</guid><description>&lt;p>A 2D RPG-like groundwork with Bevy and LDtk.&lt;/p>
&lt;h2 id="motivation">Motivation&lt;/h2>
&lt;h3 id="curiosity">Curiosity&lt;/h3>
&lt;p>A year and a half ago I saw a simple google promotion rpg-like game. I was surprised by the curiosity a simple game like that can create. Not only did I enjoy walking around in that small world, thinking how well some of the sprites turned out, but also how much time it had to take, even though it was released just as a weekly free easter-egg almost.&lt;/p>
&lt;p>I started thinking if I could make something like that, if that would be even possible. I never used any other game engine. I knew practically nothing about Unreal, Unity or Godot. But one month before that I made this
&lt;a href="/ja/project/agent_tag_bevy/">article&lt;/a> where I experienced working with Bevy, which is mostly intended as a game engine, though in that article I used is just as an ECS system.&lt;/p>
&lt;p>If my goal was to make just a game, I would probably use Typescript and some recommended library. But this was not really my goal. One of the reasons I like rust, is that it promises strong utility through performance, while being more accessible to newcomers than C++. I enjoy using rust, Bevy was interesting and I became curious how a real game would be even started, so I started looking into it.&lt;/p>
&lt;h2 id="development-process">Development process&lt;/h2>
&lt;h3 id="early-days">Early days&lt;/h3>
&lt;p>I set my goals low, I just wanted to get something going. Under some Bevy
&lt;a href="https://bevyengine.org/assets/" target="_blank" rel="noopener">links&lt;/a> I found &amp;ldquo;bevy_retrograde&amp;rdquo;. It looked at that time absolutely perfect to what I wanted to achieve. Basically a starting point to just get going with a simple rpg-like game. I went through the code in the examples of both Bevy and Bevy_retrograde and after many tries and errors, I ended up with with a moving and animating Gabe, the name of the default character provided as part of a few Bevy assets. He even collided with some shapes I created. Bevy retrograde provided some tool for creating these collisions out of shapes. It took less than 100 lines of code, but I was very proud of myself anyway, since the process wasn&amp;rsquo;t easy. I never knew exactly which examples to take guidelines from.&lt;/p>
&lt;p>And there start the problems. This bevy_retrograde was not really the big help as I was hoping. The only extra thing it really provided was this collision tool, but you also don&amp;rsquo;t always want to collide with every single pixel you or your surroundings are made of. Also I had no idea how to create the graphics for levels with just this. I realized if I wanted to continue, it would make little sense to continue building on this retrograde tool. This made me put it on the side for another year.&lt;/p>
&lt;h3 id="new-spirit">New spirit&lt;/h3>
&lt;p>Almost exactly one year later, I noticed Bevy gaining slowly but steadily more and more traction. Before there was Amethyst and some other competitors, but by this time Bevy seamed the clear leader among Game engines in Rust. New versions were coming out and I was tempted to try to port my old code to the new version and have another look at it. That was the second commit.&lt;/p>
&lt;h3 id="a-slow-process">A slow process&lt;/h3>
&lt;p>I could write a small article about every single commit after that. This was by far my biggest Rust project so far. It currently has around 1.000 lines but it feels like much much more, lol. I will mention that planning was and is a big part of such a process. After every single commit, I rewrote my priorities of the features that should be made next and a vision of the tools that could achieve that. I knew that I will eventually have to implement another solution for colliders and some tool to help with graphics. Luckily both
&lt;a href="https://rapier.rs/" target="_blank" rel="noopener">Rapier&lt;/a> and
&lt;a href="https://ldtk.io/" target="_blank" rel="noopener">LDtk&lt;/a> fit those roles well.&lt;/p>
&lt;h3 id="hurdles">Hurdles&lt;/h3>
&lt;p>Rapier is such a polished tool, I was most worried about colliders, but in th end, his was the least buggy part of my tools. I wrote down the 4 major issues I stumbled upon in my my dev process at the bottom of the &lt;code>README.md&lt;/code> they have links to the connected issue trackers and descriptions. I managed to workaround all of them, but the first was probably the most obscure one. Shortly the UI and text elements that you can spawn through Bevy are not perfect yet. This will be hopefully addressed in the future or be superseded by some other solution. The text box for displaying text to the user is probably one of the most lacking parts of my code. But its implementation is already so complicated, I dread touching it again. Thankfully there are new libraries dedicated to gui in bevy coming out like bevy_egui. I wonder what would be a good solution for better text boxes or speech/alert bubbles next to entities.&lt;/p>
&lt;p>The other three issues were connected to
&lt;a href="https://github.com/Trouv/bevy_ecs_ldtk" target="_blank" rel="noopener">bevy_ecs_ldtk&lt;/a> which is the library that connects the LDtk editor to Bevy. Among the other libraries, this is probably the weakest link, but when using LDtk with Bevy, this library seams like the by far best option. It is maintained by one dedicated and awesome guy, but it&amp;rsquo;s just one guy. I submitted a few PRs and Issues, but LDtk is made by a professional
&lt;a href="https://deepnight.net/" target="_blank" rel="noopener">company&lt;/a> or at least appears that way. And Bevy is also a huge project by now. I hope the love for &lt;code>bevy_ecs_ldtk&lt;/code> grows and receives more help from the community. Since both Bevy and LDtk are amazing and we also need an amazing bridge.&lt;/p>
&lt;h3 id="why-it-is-amazing">Why it is amazing&lt;/h3>
&lt;p>Bevy and LDtk are amazing, because they share one thing, and that is simplicity for the purpose of empowering future development. Imagine if you had to do the same thing with C++ and Tiled. Of course it can be done and the libraries are I&amp;rsquo;m sure more mature, but it is maybe unnecessarily difficult to pick up. Yes, you could say the same about JavaScript/Python, but unlike those, tools build on Rust have a serious potential to break through to a professionally acknowledged realm. Usability and accessibility, that is the magic combo that lies at the end of this tunnel.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>I am happy to have brought this to something like a proof of concept level and that it can be smoothly run in wasm on my site. Please feel free to click
&lt;a href="/ja/project/rusty_woods/">here&lt;/a> or the link on top of the page. After it loads, just click once into the middle of the canvas so it focuses, and after you can move the player with wasd or arrows. There is no other input currently.&lt;/p>
&lt;p>I hope this can motivate anybody to try out some of these tools, or even build upon my own repo. It is free to use! I hope it helps somebody to build something awesome.&lt;/p></description></item><item><title>Game engine</title><link>/ja/project/agent_tag_bevy/</link><pubDate>Tue, 24 Aug 2021 00:00:00 +0000</pubDate><guid>/ja/project/agent_tag_bevy/</guid><description>&lt;h1 id="bevy-experiment">Bevy experiment&lt;/h1>
&lt;p>This is a refactor of my previous challenge
&lt;a href="/ja/project/agent_tag/">agent-tag&lt;/a> into the ECS system of
&lt;a href="https://bevyengine.org/" target="_blank" rel="noopener">Bevy&lt;/a>.&lt;/p>
&lt;h2 id="backstory">Backstory&lt;/h2>
&lt;p>6 months ago, I accepted a challenge to make a independent agent system in Rust. This sounded very interesting to me and you can read more about it on it&amp;rsquo;s own project page
&lt;a href="/ja/project/agent_tag/">agent-tag&lt;/a>. I got it working, which was nice, but there was still this lingering thought that left me unsatisfied.&lt;/p>
&lt;h2 id="the-issue">The issue&lt;/h2>
&lt;p>I had issues with very basic principles while using pointers. I have a &lt;code>Vec&amp;lt;Agents&amp;gt;&lt;/code>, but every single &lt;code>Agent&lt;/code> wats to have a link to the parent &lt;code>Vec&lt;/code> also. I made it work with weak links. Luckily I found this excellent page in the
&lt;a href="https://doc.rust-lang.org/stable/book/ch15-06-reference-cycles.html#adding-a-reference-from-a-child-to-its-parent" target="_blank" rel="noopener">Rust Book&lt;/a> that perfectly describes this issue. You get a stack overflow, a reference cycle, if a child references it&amp;rsquo;s own parent with just a Rc. Thanks to the Weak link, that is blind until it&amp;rsquo;s upgraded, you get the structure working. But if you than want to use it for mutation, you still can&amp;rsquo;t use a already used reference, so you have to hack around it like I did with cloning the whole state and using only its links that way. This can be seen in the example from my old code bellow with my original comments that I left there for future me.&lt;/p>
&lt;p>This later version was made with &lt;code>Arc&amp;lt;Mutex&amp;lt;World&amp;gt;&amp;gt;&lt;/code> for the parent and you can just clone it to the Agents. But the proper single-thread code was with &lt;code>Rc&amp;lt;RefCell&amp;lt;World&amp;gt;&amp;gt;&lt;/code> for the parent and through &lt;code>Rc::downgrade(world)&lt;/code> you store it in the agents as &lt;code>Weak&amp;lt;RefCell&amp;lt;World&amp;gt;&amp;gt;&lt;/code>. That&amp;rsquo;s why in this example, you access the links with just &lt;code>.lock()&lt;/code>. In the single-thread case you have to use &lt;code>.borrow()&lt;/code> and &lt;code>.borrow_mut()&lt;/code> when working from the parent (World). And prepend it with &lt;code>.upgrade()&lt;/code> when working from inside the child (Agent). It&amp;rsquo;s ironic that the single-thread syntax is a little more complicated, but it is good to know both ways.&lt;/p>
&lt;pre>&lt;code class="language-rust">// regret: this still feels like a hack to me
// tag agents
let agents = world.lock().unwrap().agents.clone();
agents
.iter()
.enumerate()
.for_each(|(index, agent)| agent.tag(index));
// ...
pub fn tag(&amp;amp;self, my_index: usize) {
// this is a cloned self, so changes on it won't influence the real world!
// only it's links or current state are useful
if self.status == Status::Tagged {
if let Some(target) = self.find_neighbor() {
if self.announce_tag {
println!(&amp;quot;!!!! FOUND NEIGHBOR !!!!&amp;quot;);
}
self.world_link.lock().unwrap().tag_agent(my_index, target);
}
};
}
&lt;/code>&lt;/pre>
&lt;p>So in the end the code works. I even attempted to make this multi-threaded version with Rayon, but without managing to get a performance improvement. Multi-thread is still difficult to do right.&lt;/p>
&lt;h2 id="a-ray-of-light">A ray of light&lt;/h2>
&lt;p>Half a year passed and I was watching just another Rust YouTube video, not even a new one. But suddenly the lady started talking about exactly my issue above. Suddenly I felt like not a crazy person, but that this is possibly a common issue for many people. Here is the exact timestamp where she seams to talk about exactly this -&amp;gt;
&lt;a href="https://youtu.be/aKLntZcp27M?t=1205" target="_blank" rel="noopener">video&lt;/a>.&lt;/p>
&lt;p>Or this embedded should also open at timestamp:&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/aKLntZcp27M?start=1205" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;p> &lt;br>
She continues to talk about this being an inherent problem of OOP ways of thinking about code. How generational indexes are addressing this issue and how they are used especially in ECS systems and game development. Things finally started making sense after all those months.&lt;/p>
&lt;h2 id="bevy">Bevy&lt;/h2>
&lt;p>This prompted me to look up Bevy. I saw it shortly once before when I was looking for ways to create a go-board for my &amp;ldquo;yewban&amp;rdquo; project (css was enough for that lol). It was time for a second look at Bevy. It is only a year old, but already looks incredibly promising. I also love some of its core ideas. Obviously it&amp;rsquo;s free software, but also that they don&amp;rsquo;t use any fancy macros, so that using it doesn&amp;rsquo;t feel like black magic. And also that it seams very easy and modular to use &amp;ldquo;plugins&amp;rdquo;, making it probably easy for other developers to extend the core library.&lt;/p>
&lt;h2 id="observations-during-the-refactor">Observations during the refactor&lt;/h2>
&lt;p>This is my first time using Bevy, so all my negative comments are probably just lack of knowledge, but the purpose of of this article is to convey my experience and feelings with it.&lt;/p>
&lt;ul>
&lt;li>One of the drawbacks of using an ECS system is the lack of indexing your own &lt;code>Vec&lt;/code> of entities. In my old code, I could write:&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-rust">...
.agents
.iter()
.position(|agent| {...})
&lt;/code>&lt;/pre>
&lt;p>
&lt;a href="https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.position" target="_blank" rel="noopener">&lt;code>.position()&lt;/code>&lt;/a> is Rusts' own tool to give you a &lt;code>Option&amp;lt;usize&amp;gt;&lt;/code> with the index where it maybe found something. In bevy, if I didn&amp;rsquo;t miss something, if I want to check the first matching entity and continue to use it for other tings, I had to do this with:&lt;/p>
&lt;pre>&lt;code class="language-rust">let mut origin: Option&amp;lt;Entity&amp;gt; = None;
for (status, entity) in query.iter_mut() {
if *status == Status::Tagged {
origin = Some(entity);
break;
};
}
&lt;/code>&lt;/pre>
&lt;p>It&amp;rsquo;s not too bothersome, but it doesn&amp;rsquo;t feel elegant.&lt;/p>
&lt;p>Also connected to this is a small disappointment.
&lt;a href="https://bevyengine.org/news/bevy-0-5/#uber-fast-for-each-query-iterators" target="_blank" rel="noopener">Recently&lt;/a> they claimed that the new &lt;code>.for_each()&lt;/code> should be preferred to .iter(). Unfortunately if you are searching for the first occurrence of something, you want to break soon to be more efficient. But you also can&amp;rsquo;t use the more efficient &lt;code>.for_each()&lt;/code> with break. Not horrible, but a little unfortunate.&lt;/p>
&lt;ul>
&lt;li>I know that Bevy and game engines in general are made for multi-threaded work. Unfortunately my exercise had very strict turns and so I had to write something like:&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-rust">.add_system(update_grid.system().label(UPDATE_GRID))
.add_system(print_grid.system().label(PRINT_GRID).after(UPDATE_GRID))
.add_system(move_agents.system().label(MOVE_AGENTS).after(PRINT_GRID))
.add_system(tag.system().label(TAG).after(MOVE_AGENTS))
.add_system(sleep2s.system().label(SLEEP).after(TAG))
.add_system(exit.system().label(EXIT).after(SLEEP))
&lt;/code>&lt;/pre>
&lt;p>Any time you want to switch around some step, think about all the editing. Again, it&amp;rsquo;s not a dealbreaker, but something doesn&amp;rsquo;t feel right. I tried using a single-threaded custom stage, but that also doesn&amp;rsquo;t guarantee execution order. You have to be specific with the order by using labels, also opening you up to contradictions if messed up.&lt;/p>
&lt;ul>
&lt;li>The query syntax works really well. Although you have to get used to the weird feeling that all the arguments used in the &lt;code>.system()&lt;/code> functions are written without &lt;code>&amp;amp;&lt;/code>. So you take a:&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-rust">fn tag(
mut agents: Query&amp;lt;(&amp;amp;mut Status, &amp;amp;Position, Entity), With&amp;lt;Agent&amp;gt;&amp;gt;,
mut tag_count: ResMut&amp;lt;TagCount&amp;gt;,
grid_size: Res&amp;lt;InputSize&amp;gt;,
announce_tag: Res&amp;lt;InputAnnounceTag&amp;gt;,
) {...
&lt;/code>&lt;/pre>
&lt;p>But you are not really taking ownership of anything. Because you are not explicitly returning any of them at the end of the function. In a normal function this would be resource acquisition and drop at the end of the function scope. Also changing the tag_count works just like you would expect from a borrowed mut. I don&amp;rsquo;t mind it, but it is something I did squint at for a little bit, doubting if I remember the ownership rules correctly. I am still not exactly sure how or why this works, but I hope I&amp;rsquo;m not writing nonsense here, lol.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>I didn&amp;rsquo;t have any borrow-checker or syntax fighting issues with bevy. I found it very intuitive and it is amazing that you can relatively easily read its source code. It is not using strictly just a component entity-map with generational-indexes, but something called Archetypes. I got a little lost in the internal logic there, but suffice it to say that it just works.&lt;/p>
&lt;p>You simply write systems with queries that have everything you need and if you don&amp;rsquo;t have to be tick/frame-exact, you can just throw it into the app builder and you get a perfectly working multithreaded system that takes care of everything.&lt;/p>
&lt;h2 id="benchmark">Benchmark&lt;/h2>
&lt;p>Unfortunately my use-case was just a very simple single-threaded one. So when I compared the performance to my old suboptimal code without any shell printing.&lt;/p>
&lt;p>10k ticks, default 40 entities on a 25x25 grid:&lt;/p>
&lt;pre>&lt;code class="language-sh">time cargo run --release -- -t0 -m10000 -d
&lt;/code>&lt;/pre>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Bevy&lt;/th>
&lt;th>Old code&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>~700 ms&lt;/td>
&lt;td>&amp;lt; 100 ms&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>The old suboptimal code is still almost 10x quicker. Even with the Arc instead of Rc, while cloning the whole state every time. So that was a little underwhelming. On the other hand, Bevy is a full-fledged ECS system with many components that make it possible to raise a real large scale project. My tiny example with just 40 entities on a small grid&amp;hellip; maybe it should not be surprising it is 10x faster on a small code base and a small sample.&lt;/p>
&lt;hr>
&lt;p>I tried again with a slightly bigger numbers. Still 10k ticks, but 500 entities and 50x50 grid:&lt;/p>
&lt;pre>&lt;code class="language-sh">time cargo run --release -- -s50 -a500 -t0 -m10000 -d
&lt;/code>&lt;/pre>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Bevy&lt;/th>
&lt;th>Old code&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>~880 ms&lt;/td>
&lt;td>~240 ms&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>So while the suboptimal code more than doubled, Bevy increased only about +25%.&lt;/p>
&lt;hr>
&lt;p>10x again&amp;hellip; size 200 and 5k entities.&lt;/p>
&lt;pre>&lt;code class="language-sh">time cargo run --release -- -s200 -a5000 -t0 -m10000 -d
&lt;/code>&lt;/pre>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Bevy&lt;/th>
&lt;th>Old code&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>2.15 s&lt;/td>
&lt;td>1.62 s&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Repeating this command gives in both crates surprisingly consistent results. Even when changing the number of ticks, the suboptimal code is around 75% that of Bevy. So as the world grows, the times get closer. That is not surprising.&lt;/p>
&lt;hr>
&lt;p>With 20k entities, Bevy is finally faster.&lt;/p>
&lt;pre>&lt;code class="language-sh">time cargo run --release -- -s200 -a20000 -t0 -m10000 -d
&lt;/code>&lt;/pre>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Bevy&lt;/th>
&lt;th>Old code&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>5.85 s&lt;/td>
&lt;td>6.12 s&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>But this is all just for fun! This is obviously not indicative of any real-game use-case. Firstly this is all single-threaded. And secondly my old code is just a pice of an experiment and not suited for any other use. Also there are probably many optimizations I could have used in Bevy that I missed. As I said, first try.&lt;/p>
&lt;h2 id="ps">PS&lt;/h2>
&lt;p>Bevy is amazing and inspiring! Especially considering it is only one year old. I might try to learn some of the graphics plugins it provides and try to learn some more in the future.&lt;/p></description></item><item><title>Agent based simulation modeling</title><link>/ja/project/agent_tag/</link><pubDate>Sat, 06 Mar 2021 00:00:00 +0000</pubDate><guid>/ja/project/agent_tag/</guid><description>&lt;h2 id="motivation-and-lessons-learned">Motivation and lessons learned&lt;/h2>
&lt;p>My first attempt of an agent based simulation model. The agents themselves are purely random in their behavior, which can make this project look incomplete. But the purpose of this exercise was to see if I can even manage to set it up and get it working.&lt;/p>
&lt;p>I did this over the weekend and got allot of new experience thanks to it. I got to try out
&lt;a href="https://crates.io/crates/structopt" target="_blank" rel="noopener">structopt&lt;/a> a cli input tool which I absolutely love and can&amp;rsquo;t recommend enough. I also tried out
&lt;a href="https://crates.io/crates/rayon" target="_blank" rel="noopener">Rayon&lt;/a> for the first time. It was a good experience to fixing structs so that they become &amp;ldquo;send&amp;rdquo;. But in the end, rayon didn&amp;rsquo;t improve the performance of my particular code. It would require further deeper analysis to find out why exactly, but my very simple &amp;ldquo;benchmark&amp;rdquo; is bellow. Again, it was rather about the experience than about making the fastest possible multithreaded implementation possible.&lt;/p>
&lt;p>The probably biggest experience I got out of this exercise was the use of Rc, RefCell and weak links.&lt;/p>
&lt;p>When one agent needs to mutate another (tag) another. How can one object in a Vec change the one next to it. It has been a while since I was using RCs. But you can&amp;rsquo;t give a normal mutable ref to them, so I just tried it with RCs and thought it should be ok. I encountered a huge block and was totally lost when that didn&amp;rsquo;t work and I didn&amp;rsquo;t understand why.
After a while, I found an example using weak links. I never used those before, but I gave it a try. I realized why I&amp;rsquo;m getting the error about the RC being already borrowed. Through the first RC I get to the Agent itself, and then I&amp;rsquo;m trying again to use the same RC from inside the Agent - that was the issue. This got solved by cloning the agent with its owned link. Thereby dropping the initially established connection. Now I can use the link from inside the cloned Agent. This works, but somehow it it doesn&amp;rsquo;t feel right. I still remember writing this code and I felt dirty. But the next challenge was right around the corner. When you try to print out sch an agent, it will try to resolve its link to the parent, finding again the same child, resolving it&amp;rsquo;s link to the parent and so on. With that I got possibly my first stack overflow in Rust. You can imagine my frustration at this point, I was still lost. But fortunately getting back to those weak links and the
&lt;a href="https://doc.rust-lang.org/book/ch15-06-reference-cycles.html?highlight=weak#adding-a-reference-from-a-child-to-its-parent" target="_blank" rel="noopener">example in the Book&lt;/a> solved this issue. A weak link doesn&amp;rsquo;t resolve immediately, causing this loop, but needs to be called explicitly. And it should be possible to call it, since it&amp;rsquo;s called from a clone, who&amp;rsquo;s link is not used anymore at that moment. This way, any time the link is used, a clone is being made. I still don&amp;rsquo;t know about a better solution. After this started working, I felt like getting away with murder and somehow still not happy, but at least with hope that I could finish this exercise.&lt;/p>
&lt;p>Later when I changed the Rc for Arc, this loop issue solved with weak links became not necessary anymore. Since you have to lock Mutex also explicitly. But well, was still a good experience.&lt;/p>
&lt;h2 id="simulation-rules">Simulation rules&lt;/h2>
&lt;h3 id="movement">Movement&lt;/h3>
&lt;p>All agents move on every tic one space in one of their neighboring directions (up, down, left right) on random. If they cross a wall, they pop out on the other side.&lt;/p>
&lt;h3 id="tagging">Tagging&lt;/h3>
&lt;p>At the start, one agent is chosen as &amp;ldquo;it&amp;rdquo; on random. If and another agent come next to each other (on one of the four directions) the tag is exchanged. The previously tagged agent becomes impossible to tag again, until another tag is exchanged.&lt;/p>
&lt;h2 id="build">Build&lt;/h2>
&lt;pre>&lt;code class="language-shell">cargo build --release
&lt;/code>&lt;/pre>
&lt;h2 id="run">Run&lt;/h2>
&lt;p>The most interesting use of this piece of code at this moment, is to see how the amount of exchanged tags can change when changing the options of the world. With the flags bellow, it is very easy to adjust the size of the world, the number of agents and how many moves they make.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Either the build result from the previous step.&lt;/p>
&lt;pre>&lt;code class="language-shell">cd target/release/
./agent-tag
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>Or through cargo&lt;/p>
&lt;pre>&lt;code class="language-shell">cargo run
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>
&lt;p>add flags to the cargo format after &lt;code>--&lt;/code>&lt;/p>
&lt;pre>&lt;code class="language-shell">cargo run -- -h
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="options">Options&lt;/h2>
&lt;p>Please see the flags and options bellow. All of them have sensible defaults, so just running the program without any should give you still a reasonable result.&lt;/p>
&lt;h3 id="help-text">Help text&lt;/h3>
&lt;pre>&lt;code class="language-shell">agent-tag --help
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-output">agent-tag 0.1.0
A tag game simulator with stupid agents
USAGE:
agent-tag [FLAGS] [OPTIONS]
FLAGS:
-d, --disable-grid Adding this flag disables the output of the field (grid). For benchmarking, when printing
the grid on the cli is not required
-h, --help Prints help information
-p, --print-announce During a run, announce that in the next visible frame, a tag will occur. Otherwise it is
easy to miss it
-V, --version Prints version information
OPTIONS:
-a, --agents &amp;lt;agents&amp;gt; Number of agents [default: 40]
-m, --moves &amp;lt;moves&amp;gt; Number of moves (tics) before the program finishes. Important for benchmarking, otherwise a
simple kill ^C works too [default: 10]
-s, --size &amp;lt;size&amp;gt; Size of field (grid) [default: 25]
-t, --time &amp;lt;time&amp;gt; Number of ms between tics [default: 1000]
&lt;/code>&lt;/pre>
&lt;h3 id="very-simple-benchmark">Very simple benchmark&lt;/h3>
&lt;p>Just running &lt;code>time&lt;/code> (the common linux tool). This example runs with 10.000 moves. When -t0 is set, there is no thread sleep called between the moves. Toggling the -d flag shows how much time is spent on the graphical aspect of the program.&lt;/p>
&lt;pre>&lt;code class="language-shell">time target/release/agent-tag -t0 -m10000 -d
&lt;/code>&lt;/pre>
&lt;p>Without Rayon:&lt;/p>
&lt;pre>&lt;code class="language-output">________________________________________________________
Executed in 19,63 millis fish external
usr time 19,61 millis 528,00 micros 19,08 millis
sys time 0,21 millis 215,00 micros 0,00 millis
&lt;/code>&lt;/pre>
&lt;p>with Rayon:&lt;/p>
&lt;pre>&lt;code class="language-output">________________________________________________________
Executed in 155,57 millis fish external
usr time 1208,72 millis 748,00 micros 1207,97 millis
sys time 541,37 millis 0,00 micros 541,37 millis
&lt;/code>&lt;/pre>
&lt;p>The results are surprising. The refactor from Rc to Arc (and giving each agent it&amp;rsquo;s own RNG) didn&amp;rsquo;t slow down the run much. But when then used with Rayon, to use more threads for the many agents, the release binary actually ran 4x slower. Even when raising the number of agents from 40 to 400, the binary without Rayon (single threaded) was 4x faster.
Sometimes the results can vary allot based on use case and that&amp;rsquo;s why these tests can be so useful when implementing parallelism. I left the two tested functions commented in the code with &amp;ldquo;# Raion&amp;rdquo;&lt;/p>
&lt;p>Running just &lt;code>time&lt;/code> is not a perfect benchmarking tool, especially for results under a second. But good enough for rough comparisons between different setups I guess.&lt;/p></description></item><item><title>Yewban</title><link>/ja/project/yewban/</link><pubDate>Sat, 23 Jan 2021 00:00:00 +0000</pubDate><guid>/ja/project/yewban/</guid><description>&lt;h2 id="motivation">Motivation&lt;/h2>
&lt;h4 id="searching-for-a-frontend-experience">Searching for a frontend experience&lt;/h4>
&lt;p>During my day job I work with APIs, databases and general backend code. Last time I did anything frontend related were tutorials and small projects with react around 2018. So I decided to do something frontend UI related and interesting. My tendency was to use rust and my first idea was to make a regular desktop app with gtk3. I thought that making a board game grid would be a good and simple enough idea. I was fiddling around with GTK3 in Glade, which is a great tool, and was learning about basic graphical setups with Cairo. But it was all still too new to me and I gave up on making a board with Cairo. But regular desktop apps with GTK3 are a great choice for Rust too it seams. I might do something with that in the future.&lt;/p>
&lt;p>A few days later I stumbled upon a nice new
&lt;a href="http://www.sheshbabu.com/posts/rust-wasm-yew-single-page-application/" target="_blank" rel="noopener">blog post&lt;/a> about a full featured frontend web framework with rust and WebAssembly using
&lt;a href="https://yew.rs/" target="_blank" rel="noopener">Yew&lt;/a>. I heard about Yew before so it caught my attention. I started thinking about how I would make a game grid using css.&lt;/p>
&lt;h2 id="development-process">Development process&lt;/h2>
&lt;h3 id="css">CSS&lt;/h3>
&lt;p>So I did the grid with css. This part is always tedious, especially when not doing it often, but it worked. I decided that I would simply make the grid lines not visible, put the goban picture as a scalable background, and the stones as images inside the grid fields. In the end, all the pictures I used are png. It would be better with svg, but as a proof of concept this is good enough.&lt;/p>
&lt;h3 id="yew">Yew&lt;/h3>
&lt;p>I read through the short docs on
&lt;a href="https://yew.rs/" target="_blank" rel="noopener">Yew&lt;/a>. It took me a while to realize that the recommended examples on their github are described in their &amp;ldquo;next&amp;rdquo; version of the docs, where they recommend
&lt;a href="https://crates.io/crates/trunk" target="_blank" rel="noopener">trunk&lt;/a> for building the wasm/js bindings. Even the few months old blog post is using a different process. One can really feel that this is still an evolving technology. At the same time, one clearly sees how much better and easier the building process got, from the older tools mentioned in the yew docs all the way to the quite new trunk crate. I can say that using trunk was a breeze. Bellow I write down the common commands and it should be obvious how intuitive and strait forward it is. This was definitely a pleasant and appreciated surprise, since I remember reading some months ago that the rust wasm packaging for javascript was quite tedious.&lt;/p>
&lt;p>Yew as a framework itself was also a pleasant surprise.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>It is very similar to react, so the concepts were very easy to pick up.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>There were almost zero issues regarding fighting with the compiler.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>I write TypeScript every day at work and since it&amp;rsquo;s just a superset of JavaScript, it&amp;rsquo;s a syntax that lets you get away with allot. So you tend to write the code fast, but later you have to search for bugs if they arise. This is a feature not a bug. Websites are not rocket engines. Employers don&amp;rsquo;t want to spend 5x the amount of money/time to put the same buttons on the screen, just because there could be less time needed for bug fixing. I totally understand this and that is why nobody expected rust to be a viable frontend language. I am not an expert on this topic to present some definite answer. But what I am trying to say, is that I expected much more pain and surprisingly there was none. Not even a little, really none. Well actually, there was 1 compiler error. I wrote down the short 80 lines of code that create the logic of putting stones into the grids and the one and only compiler error I had was that I didn&amp;rsquo;t use the &amp;ldquo;move&amp;rdquo; command before the closure. It took a moment to realize why it is necessary, but even without the realization, the compiler itself suggested to solve it that way. Prior to writing the 80 lines, I also took some inspiration from the
&lt;a href="https://github.com/yewstack/yew/tree/master/examples/game_of_life" target="_blank" rel="noopener">game_of_life&lt;/a> example. That also helped.&lt;/p>
&lt;h3 id="gimp">Gimp&lt;/h3>
&lt;p>Now I had a clickable board, placing a dummy image into a grid. Proof of concept achieved! Felt good, but this doesn&amp;rsquo;t look like a goban at all. The time came to get rid of the cell borders and somehow fit bellow them a goban grid, where the stones have to sit on the intersections, not in the fields. In the total beginning, I tried to make that somehow work with lines drawn with CSS, but I didn&amp;rsquo;t find a way how to make that work. I think having one grid virtual and using it for stone pictures and the other grid as a background picture is still a good solution.&lt;/p>
&lt;p>As a big linux and libre-software enthusiast, I spent a few weeks last year learning some gimp basics. That came incredibly in handy at this moment. There are surprisingly many great free sources of gimp tutorials. Among other there is for example the excellent
&lt;a href="https://www.daviesmediadesign.com/" target="_blank" rel="noopener">daviesmediadesign&lt;/a>.&lt;/p>
&lt;p>I need only two things on two layers. A good wood (ideally pine) pattern, and a grid.
Finding the wood pattern was surprisingly a bigger challenge than I expected. Writing this article is already much more time than I wanted to spend on pattern acquisition. I couldn&amp;rsquo;t find a free external gimp pattern and I also couldn&amp;rsquo;t find an appropriate good and free pine wood picture. This is just a concept. I wanna get something slightly better than making the background plain yellow. In the end I used a gimp preinstalled pattern. There are 13 wood patterns and they all look horrible, with the exception of one, my savior called just &amp;ldquo;pine&amp;rdquo;. I put it on a 1920x1920 canvas and the result was surprisingly good.&lt;/p>
&lt;p>Than View &amp;gt; Show guides, Image &amp;gt; Guides &amp;gt; New by percent. One horizontal, one vertical, and you have the grid middle. A simple google search for drawing grids in gimp told me that there is a tool for it under Filters &amp;gt; Render &amp;gt; Pattern &amp;gt; Grid. It also has a &amp;ldquo;offset&amp;rdquo; property, that allowed me to shift the grid perfectly into the center of the guides, while making appropriate space on the border.&lt;/p>
&lt;p>The overflowing grid lines on the border were cut with a layer mask. The dots were painted individually by hand with the pencil tool.&lt;/p>
&lt;p>And thats it. Export as png. Than just a few google searches for some large go stone pictures. I found surprisingly good ones. And thats it. Add everything into the CSS and I was blown away how great the result looked, compared to how little time and prior experience it took.&lt;/p>
&lt;p>The center of both grids were aligned nicely, but as expected, there were some misalignment issues on the edges. That was nicely solved by having in the css &lt;code>box-sizing: border-box;&lt;/code> where a dynamic &lt;code>padding: calc(var(--size) / 90);&lt;/code> shrinks the invisible grid inwards, perfectly fitting the png under it. Holding with any scale of the window. Wonderful!&lt;/p>
&lt;h3 id="external-goban-library">External Goban library&lt;/h3>
&lt;p>Now I had a perfectly looking 5-in-a-row game. Almost go. Still I thought lets push just a little more. I want to at least capture the stones. That is no trivial matter. I could try writing this logic by myself, but previously I found
&lt;a href="https://crates.io/crates/goban" target="_blank" rel="noopener">this&lt;/a> great library that was just under development with only days after the last commit.&lt;/p>
&lt;p>I spent some time reading through it, trying to understand it and thinking how to fit it onto my existing code. In the end, I found that he stores the stone values also simply in a vector. Just how I did previously. Than simply mapping them as DIVs into the grid container. I got that out with his &amp;ldquo;.raw()&amp;rdquo; method. Mapped that on the board and suddenly I was able to capture my stones! It was like magic. The magic of open source, haha. I found a tiny bug, reported it to him, and he even fixed it in a few short hours. I feel the love for go and code connecting us, haha.&lt;/p>
&lt;p>I added the right panel that shows captured stones and I could add much more still. And maybe I will in the future, but for now I feel like the project&amp;rsquo;s purpose was achieved.&lt;/p>
&lt;p>A frontend written purely in rust, under 80 lines of code in &lt;code>main.rs&lt;/code>. Compiled to WebAssembly. Sitting relaxed on my website. It was a great experience and I had many pleasant surprises.&lt;/p>
&lt;p>Please feel free to click on the link on the top of this page and place a stone or two.&lt;/p>
&lt;hr>
&lt;h2 id="install">Install&lt;/h2>
&lt;h4 id="install-the-build-tools">install the build tools&lt;/h4>
&lt;pre>&lt;code>cargo install trunk wasm-bindgen-cli
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>Trunk is really amazing. At the time of writing it is recommended only in the non-stable version of the yew documentation. Trunk mentions that in the future, the &lt;code>wasm-bindgen-cli&lt;/code> package will be installed as part of trunk.&lt;/li>
&lt;/ul>
&lt;h4 id="install-the-rust-wasm-toolchain">install the rust wasm toolchain&lt;/h4>
&lt;pre>&lt;code>rustup target add wasm32-unknown-unknown
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>Otherwise &lt;code>trunk build&lt;/code> won&amp;rsquo;t go through.&lt;/li>
&lt;/ul>
&lt;h2 id="development">Development&lt;/h2>
&lt;h4 id="build">Build&lt;/h4>
&lt;pre>&lt;code>trunk build
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>This creates the &lt;code>/dist&lt;/code> folder. Under the hood it also runs &lt;code>cargo build&lt;/code> that creates the &lt;code>/target&lt;/code> folder. So you can still normally use cargo&amp;rsquo;s check, build or clippy for checking code.&lt;/li>
&lt;li>
&lt;h4 id="static-files">Static files:&lt;/h4>
The folder &lt;code>/static&lt;/code> and its contents are copied via trunk automatically to &lt;code>/dist&lt;/code> thanks to this line in &lt;code>index.html&lt;/code>:&lt;br>
&amp;ldquo;&lt;code>&amp;lt;link data-trunk rel=&amp;quot;copy-dir&amp;quot; href=&amp;quot;static&amp;quot;/&amp;gt;&lt;/code>&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;h4 id="build-view-and-rebuild-code-on-the-fly">Build, view and rebuild code on the fly&lt;/h4>
&lt;pre>&lt;code>trunk serve
&lt;/code>&lt;/pre>
&lt;h2 id="sharing-the-result">Sharing the result&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>To cut the total size, get a clean output folder (if previous builds were made). This deletes the &lt;code>./dist&lt;/code> folder.&lt;/p>
&lt;pre>&lt;code>trunk clean
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>Make a new optimized build.&lt;/p>
&lt;pre>&lt;code>trunk build --release
&lt;/code>&lt;/pre>
&lt;p>If you want to run the html directly, for example on a different system, just launching &lt;code>index.html&lt;/code> from &lt;code>./dist/&lt;/code> won&amp;rsquo;t work! If you need to use the &lt;code>index.html&lt;/code> directly (for example in a link on your web), you have to change the 3 addresses for the .css, .js and .wasm inside. That is what I did on this web. Otherwise by default it is searching for them in root.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>But locally the simplest way is to serve the folder:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>take the content of &lt;code>./dist/&lt;/code> and serve it with any of these:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>rust tool:&lt;/p>
&lt;pre>&lt;code>miniserve ./dist --index index.html
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>npm (nodejs) tool:&lt;/p>
&lt;pre>&lt;code>http-server ./dist
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>usually present by default on linux (run from inside the folder):&lt;/p>
&lt;pre>&lt;code>python3 -m http.server
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Exercism.io</title><link>/ja/project/exercism/</link><pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate><guid>/ja/project/exercism/</guid><description>&lt;h2 id="a-new-language">A new language&lt;/h2>
&lt;p>When I started learning Rust in the second half of 2019, I first read &amp;ldquo;
&lt;a href="https://doc.rust-lang.org/book/" target="_blank" rel="noopener">The Book&lt;/a>&amp;rdquo; from the official website. I can highly recommend it. It takes a little longer to get going and many people prefer to go right into writing code, but my first step into this very new territory was intentionally cautious and thorough. I spent my fair share of time on the book.&lt;/p>
&lt;h2 id="after-the-basics">After the basics&lt;/h2>
&lt;p>There is also &amp;ldquo;Rust by example&amp;rdquo; which is more hands on. I went through it after reading the book relatively quickly, it is also very well made. At this stage jumping on some exercises is the perfect time. Experimenting with different approaches to new problems and fighting the typical hurdles of a new programming language is ideal. Rust especially has a slightly higher learning curve than other languages that try to be more similar to each other. On the other hand, I only spent a lot of time on JavaScript before Rust, so I went into it with a still rather flexible mind. I&amp;rsquo;m sure that helped allot.&lt;/p>
&lt;h2 id="where-to-exercise">Where to exercise&lt;/h2>
&lt;p>When learning JavaScript, I also used to do some exercises on pages like
&lt;a href="https://codecademy.com" target="_blank" rel="noopener">codecademy.com&lt;/a>,
&lt;a href="https://codingame.com" target="_blank" rel="noopener">codingame.com&lt;/a> and
&lt;a href="https://codewars.com" target="_blank" rel="noopener">codewars.com&lt;/a>. All of them are wonderful and totally free options for beginners. Especially codewars seamed to provide close to unlimited content and a great way how to compare solutions with others. It&amp;rsquo;s really amazing how many good and free options there are to learn and improve at coding.&lt;/p>
&lt;h2 id="exercism">Exercism&lt;/h2>
&lt;p>In the Rust community, I heard recommendations about
&lt;a href="https://exercism.io" target="_blank" rel="noopener">exercism.io&lt;/a>. That&amp;rsquo;s where I first found the page. I can&amp;rsquo;t praise this website enough. I spent a few months around the end of 2019, doing exercises in Rust several times a week. At that time, I was able to get real reviews by mentors on the page, guiding me through the solutions. Later when the language became more popular, there were not enough mentors to give direct reviews. It was still possible to progress through an &amp;ldquo;unguided&amp;rdquo; track though and compare your solutions to those from other users.&lt;/p>
&lt;h2 id="final-thoughts">Final thoughts&lt;/h2>
&lt;p>By the time of writing, I don&amp;rsquo;t spend much time on Rust anymore. I have two other goals that I want to reach by the end of the year. But If I get the itch to play around with some Rust again, I still left some untouched exercises on the page and I&amp;rsquo;m sure I would have some good fun with it, while also learning some new practices and ways to think about coding.&lt;/p>
&lt;h3 id="ps">PS&lt;/h3>
&lt;p>At the beginning on this website, the picture slider, the second picture that is saying &amp;ldquo;Developer&amp;rdquo;. That background was my own screenshot, a little edited in gimp, from one of my last exercises on exercism.&lt;/p>
&lt;figure >
&lt;a data-fancybox="" href="/media/slider/code.png" >
&lt;img src="/media/slider/code.png" alt="" >
&lt;/a>
&lt;/figure></description></item><item><title>API in Rust</title><link>/ja/project/graphql_rust/</link><pubDate>Thu, 30 Jul 2020 00:00:00 +0000</pubDate><guid>/ja/project/graphql_rust/</guid><description>&lt;h2 id="db-experience">DB experience&lt;/h2>
&lt;p>During my 2 years of self study between 2017-2019, I spent a few months studying MongoDB. At that time, it was recommended as a good technology for the web. I knew some basic SQL, and I spent some time with SQLite in a Python project tutorial during my study, but MongoDB was a database that I really put in some effort and finished the free certificates that they have on their official website. I have to say that I like MongoDB, and I was lucky to find my current company starting 2019, where MongoDB is used exclusively.&lt;/p>
&lt;h2 id="day-job">Day job&lt;/h2>
&lt;p>Most of my work is focused on the backend of a big portal website for users and admins. Specifically, the creation and maintenance of APIs. Written in TypeScrip, stored in MongoDB and served with GraphQL. GraphQL was new to me when I started in the company, but once I got used to it, serving data via REST feels like some totally antiquated. Of course, we also use REST for necessary things, but the type safety of GraphQL and the schemas is something amazing.&lt;/p>
&lt;h2 id="rust">Rust&lt;/h2>
&lt;p>During 2019, I wanted to learn a new programming language. Most of my time 2017-2019 I spent learning JavaScript. I spent a some time on C and Python too. I like python, but I already did a small project with it, some intermediate tutorials, and although I definitely could learn much more in Python, It didn&amp;rsquo;t really feel challenging enough and I wanted something that would push my knowledge as a developer. C was interesting, but way too hard for me to spend too much time on it. I wanted something practical and modern. The purpose was to learn to be a better programmer, but I felt like I would spend too much time on suffering while trying to build something in C. A colleague at work started to learn GOlang a little. I felt tempted to read up on it a little and stumbled upon this wave of new programming languages growing in 2019 like go, rust or julia. Julia felt too esoteric to me and GO somehow too popular to be cool. But when I was reading about Rust and their attempt to make memory management like in C accessible and safe for even beginner programmers, I was very intrigued. I don&amp;rsquo;t regret my choice in Rust a bit. It was exactly what I was looking for. Something more challenging on a technical level, but also holding your hand in the process, making for a great learning experience.&lt;/p>
&lt;p>First I read &amp;ldquo;The book&amp;rdquo; from the official website. The book took a while, but it is very good. I prefer taking my time while studying anything and go step by step a bit every day. So I didn&amp;rsquo;t mind the length of the book. After maybe a few months, I started with tutorials on Exercism. It is an amazing website and I might make an article about it exclusively in the future.&lt;/p>
&lt;h2 id="project">Project&lt;/h2>
&lt;p>After a few weeks / months of tutorials, I felt the need to try something personal. It doesn&amp;rsquo;t need to be something production-ready, I just wanted to try to put together something new. I soon began thinking if my favorite MongoDB + GraphQL could work with Rust. I found an article from 2018 that looked a little scary, but when reading the docs of the GraphQL library for Rust, I realized 2018 might be already old information.&lt;/p>
&lt;p>I made the simple web API by the end of 2019. I will not be talking about the technical specifics of the project and its libraries. Under the link above, in the project&amp;rsquo;s readme.md, you can find the technical details. I also left plenty of comments in the code itself for me or anybody else if you are interested. But below are some memories that I have of the experience writing it.&lt;/p>
&lt;h2 id="rust-with-mongodb">Rust with MongoDB&lt;/h2>
&lt;p>The library for MongoDB could have been better. I remember thinking that using MongoDB in TypeScript with Mongoose is honestly a much better experience. In rust, the objects have to be translated through a parsing library like Serde. But I guess this is not an issue exclusive to Rust, more like a benefit when using JavaScript with JSON. It was not trivial, but possible!&lt;/p>
&lt;h2 id="rust-with-graphql">Rust with GraphQL&lt;/h2>
&lt;p>The library for GraphQL on the other hand was surprisingly nice to use. I loved how it used macros and simple Rust structs to generate its necessary objects. It was easy to create the schemas, much nicer than I remembered from the crazy 2018 article. I remember being amazed that I could easily recommend this, even though I&amp;rsquo;m not a programming veteran, and I am writing this in Rust, supposedly one of the fastest and most powerful languages out there.&lt;/p>
&lt;h2 id="final-thoughts">Final thoughts&lt;/h2>
&lt;p>So, I was very happy when this was running. Later I changed the module tree and I implemented logging. Both simply for experience and making the project feel a little more complete, even though this was basically more like a proof of concept. A challenge for myself.&lt;/p>
&lt;h2 id="would-i-change-it">Would I change it?&lt;/h2>
&lt;p>I imagine that in the past 7 months since then, both libraries got only better. I didn&amp;rsquo;t look at them since then. Also, I had a hard time to choose the web server library. I tried several till I stuck with Iron. Were I to do it over, at this time of writing, I would probably use Actix-web instead. But the library landscape of Rust is evolving quickly and it&amp;rsquo;s no surprise that there are many changes. I will not touch this project again. It serves as the memory of my experience from that time. My first personal github project.&lt;/p></description></item></channel></rss>