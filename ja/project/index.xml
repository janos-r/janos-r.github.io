<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects | Radim</title>
    <link>/ja/project/</link>
      <atom:link href="/ja/project/index.xml" rel="self" type="application/rss+xml" />
    <description>Projects</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>ja</language><lastBuildDate>Mon, 10 Aug 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hub89e7b28a6abff2b4ec084e6c0608a00_13774_512x512_fill_lanczos_center_2.png</url>
      <title>Projects</title>
      <link>/ja/project/</link>
    </image>
    
    <item>
      <title>Exercism.io</title>
      <link>/ja/project/exercism/</link>
      <pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate>
      <guid>/ja/project/exercism/</guid>
      <description>&lt;h2 id=&#34;a-new-language&#34;&gt;A new language&lt;/h2&gt;
&lt;p&gt;When I started learning Rust in the second half of 2019, I first read &amp;ldquo;
&lt;a href=&#34;https://doc.rust-lang.org/book/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Book&lt;/a&gt;&amp;rdquo; from the official website. I can highly recommend it. It takes a little longer to get going and many people prefer to go right into writing code, but my first step into this very new territory was intentionally cautious and thorough. I spent my fair share of time on the book.&lt;/p&gt;
&lt;h2 id=&#34;after-the-basics&#34;&gt;After the basics&lt;/h2&gt;
&lt;p&gt;There is also &amp;ldquo;Rust by example&amp;rdquo; which is more hands on. I went through it after reading the book relatively quickly, it is also very well made. At this stage jumping on some exercises is the perfect time. Experimenting with different approaches to new problems and fighting the typical hurdles of a new programming language is ideal. Rust especially has a slightly higher learning curve than other languages that try to be more similar to each other. On the other hand, I only spent a lot of time on JavaScript before Rust, so I went into it with a still rather flexible mind. I&amp;rsquo;m sure that helped allot.&lt;/p&gt;
&lt;h2 id=&#34;where-to-exercise&#34;&gt;Where to exercise&lt;/h2&gt;
&lt;p&gt;When learning JavaScript, I also used to do some exercises on pages like 
&lt;a href=&#34;https://codecademy.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;codecademy.com&lt;/a&gt;, 
&lt;a href=&#34;https://codingame.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;codingame.com&lt;/a&gt; and 
&lt;a href=&#34;https://codewars.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;codewars.com&lt;/a&gt;. All of them are wonderful and totally free options for beginners. Especially codewars seamed to provide close to unlimited content and a great way how to compare solutions with others. It&amp;rsquo;s really amazing how many good and free options there are to learn and improve at coding.&lt;/p&gt;
&lt;h2 id=&#34;exercism&#34;&gt;Exercism&lt;/h2&gt;
&lt;p&gt;In the Rust community, I heard recommendations about 
&lt;a href=&#34;https://exercism.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;exercism.io&lt;/a&gt;. That&amp;rsquo;s where I first found the page. I can&amp;rsquo;t praise this website enough. I spent a few months around the end of 2019, doing exercises in Rust several times a week. At that time, I was able to get real reviews by mentors on the page, guiding me through the solutions. Later when the language became more popular, there were not enough mentors to give direct reviews. It was still possible to progress through an &amp;ldquo;unguided&amp;rdquo; track though and compare your solutions to those from other users.&lt;/p&gt;
&lt;h2 id=&#34;final-thoughts&#34;&gt;Final thoughts&lt;/h2&gt;
&lt;p&gt;By the time of writing, I don&amp;rsquo;t spend much time on Rust anymore. I have two other goals that I want to reach by the end of the year. But If I get the itch to play around with some Rust again, I still left some untouched exercises on the page and I&amp;rsquo;m sure I would have some good fun with it, while also learning some new practices and ways to think about coding.&lt;/p&gt;
&lt;h3 id=&#34;ps&#34;&gt;PS&lt;/h3&gt;
&lt;p&gt;At the beginning on this website, the picture slider, the second picture that is saying &amp;ldquo;Developer&amp;rdquo;. That background was my own screenshot, a little edited in gimp, from one of my last exercises on exercism.&lt;/p&gt;








  











&lt;figure &gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/media/slider/code.png&#34; &gt;


  &lt;img src=&#34;/media/slider/code.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;



&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>API in Rust</title>
      <link>/ja/project/graphql_rust/</link>
      <pubDate>Thu, 30 Jul 2020 00:00:00 +0000</pubDate>
      <guid>/ja/project/graphql_rust/</guid>
      <description>&lt;h2 id=&#34;db-experience&#34;&gt;DB experience&lt;/h2&gt;
&lt;p&gt;During my 2 years of self study between 2017-2019, I spent a few months studying MongoDB. At that time, it was recommended as a good technology for the web. I knew some basic SQL, and I spent some time with SQLite in a Python project tutorial during my study, but MongoDB was a database that I really put in some effort and finished the free certificates that they have on their official website. I have to say that I like MongoDB, and I was lucky to find my current company starting 2019, where MongoDB is used exclusively.&lt;/p&gt;
&lt;h2 id=&#34;day-job&#34;&gt;Day job&lt;/h2&gt;
&lt;p&gt;Most of my work is focused on the backend of a big portal website for users and admins. Specifically, the creation and maintenance of APIs. Written in TypeScrip, stored in MongoDB and served with GraphQL. GraphQL was new to me when I started in the company, but once I got used to it, serving data via REST feels like some totally antiquated. Of course, we also use REST for necessary things, but the type safety of GraphQL and the schemas is something amazing.&lt;/p&gt;
&lt;h2 id=&#34;rust&#34;&gt;Rust&lt;/h2&gt;
&lt;p&gt;During 2019, I wanted to learn a new programming language. Most of my time 2017-2019 I spent learning JavaScript. I spent a some time on C and Python too. I like python, but I already did a small project with it, some intermediate tutorials, and although I definitely could learn much more in Python, It didn&amp;rsquo;t really feel challenging enough and I wanted something that would push my knowledge as a developer. C was interesting, but way too hard for me to spend too much time on it. I wanted something practical and modern. The purpose was to learn to be a better programmer, but I felt like I would spend too much time on suffering while trying to build something in C. A colleague at work started to learn GOlang a little. I felt tempted to read up on it a little and stumbled upon this wave of new programming languages growing in 2019 like go, rust or julia. Julia felt too esoteric to me and GO somehow too popular to be cool. But when I was reading about Rust and their attempt to make memory management like in C accessible and safe for even beginner programmers, I was very intrigued. I don&amp;rsquo;t regret my choice in Rust a bit. It was exactly what I was looking for. Something more challenging on a technical level, but also holding your hand in the process, making for a great learning experience.&lt;/p&gt;
&lt;p&gt;First I read &amp;ldquo;The book&amp;rdquo; from the official website. The book took a while, but it is very good. I prefer taking my time while studying anything and go step by step a bit every day. So I didn&amp;rsquo;t mind the length of the book. After maybe a few months, I started with tutorials on Exercism. It is an amazing website and I might make an article about it exclusively in the future.&lt;/p&gt;
&lt;h2 id=&#34;project&#34;&gt;Project&lt;/h2&gt;
&lt;p&gt;After a few weeks / months of tutorials, I felt the need to try something personal. It doesn&amp;rsquo;t need to be something production-ready, I just wanted to try to put together something new. I soon began thinking if my favorite MongoDB + GraphQL could work with Rust. I found an article from 2018 that looked a little scary, but when reading the docs of the GraphQL library for Rust, I realized 2018 might be already old information.&lt;/p&gt;
&lt;p&gt;I made the simple web API by the end of 2019. I will not be talking about the technical specifics of the project and its libraries. Under the link above, in the project&amp;rsquo;s readme.md, you can find the technical details. I also left plenty of comments in the code itself for me or anybody else if you are interested. But below are some memories that I have of the experience writing it.&lt;/p&gt;
&lt;h2 id=&#34;rust-with-mongodb&#34;&gt;Rust with MongoDB&lt;/h2&gt;
&lt;p&gt;The library for MongoDB could have been better. I remember thinking that using MongoDB in TypeScript with Mongoose is honestly a much better experience. In rust, the objects have to be translated through a parsing library like Serde. But I guess this is not an issue exclusive to Rust, more like a benefit when using JavaScript with JSON. It was not trivial, but possible!&lt;/p&gt;
&lt;h2 id=&#34;rust-with-graphql&#34;&gt;Rust with GraphQL&lt;/h2&gt;
&lt;p&gt;The library for GraphQL on the other hand was surprisingly nice to use. I loved how it used macros and simple Rust structs to generate its necessary objects. It was easy to create the schemas, much nicer than I remembered from the crazy 2018 article. I remember being amazed that I could easily recommend this, even though I&amp;rsquo;m not a programming veteran, and I am writing this in Rust, supposedly one of the fastest and most powerful languages out there.&lt;/p&gt;
&lt;h2 id=&#34;final-thoughts&#34;&gt;Final thoughts&lt;/h2&gt;
&lt;p&gt;So, I was very happy when this was running. Later I changed the module tree and I implemented logging. Both simply for experience and making the project feel a little more complete, even though this was basically more like a proof of concept. A challenge for myself.&lt;/p&gt;
&lt;h2 id=&#34;would-i-change-it&#34;&gt;Would I change it?&lt;/h2&gt;
&lt;p&gt;I imagine that in the past 7 months since then, both libraries got only better. I didn&amp;rsquo;t look at them since then. Also, I had a hard time to choose the web server library. I tried several till I stuck with Iron. Were I to do it over, at this time of writing, I would probably use Actix-web instead. But the library landscape of Rust is evolving quickly and it&amp;rsquo;s no surprise that there are many changes. I will not touch this project again. It serves as the memory of my experience from that time. My first personal github project.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Circle CI/CD</title>
      <link>/ja/project/circle/</link>
      <pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate>
      <guid>/ja/project/circle/</guid>
      <description>&lt;p&gt;In my company, we are using AKS (Azure Kubernetes Service). With every git commit to the master branch, a new docker image is build and pushed to the repository with CircleCI. It is automatically deployed to the dev cluster. At a controlled release moment, we are then able to release all necessary docker images with their particular versions in one go to the production cluster using helm.&lt;/p&gt;
&lt;p&gt;The project is quite big and all connected parts are quite complicated in their setup. That&amp;rsquo;s why I wanted to create my own small project and learn how to set up a similar CI/CD (circular integration / circular deployment).&lt;/p&gt;
&lt;p&gt;I did so June 2020. Link to the project above. Journey description below.&lt;/p&gt;
&lt;h2 id=&#34;what-to-push&#34;&gt;What to push&lt;/h2&gt;
&lt;p&gt;First decision was &lt;strong&gt;what&lt;/strong&gt; to build and push. I made a simple website with the static site generator 
&lt;a href=&#34;https://gohugo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hugo&lt;/a&gt;. It was the first time I made a web with hugo, so this was in itself a very good learning experience. I stuck literary to the &amp;ldquo;quick start&amp;rdquo; guide to not lose too much time with this step, since the page itself is obviously not the goal of this project. But in general, I can only recommend Hugo.&lt;/p&gt;
&lt;h2 id=&#34;script-before-circle&#34;&gt;Script before circle&lt;/h2&gt;
&lt;p&gt;Obviously I wanted to use the same technologies that we are using on the company project. I was eager to get into CircleCI, but I quickly realized that is not the right approach. It turns out that the best approach for me was to leave the CI as the absolute last step. First make a long list of all the cli commands that you find useful. I put most of them in the readme.md of the project. This is not &amp;ldquo;best practice&amp;rdquo; for a readme, but I well, it was meant to be just my personal learning project and I wanted to have the commands visible. Only after you can do everything with your cli commands from beginning to end, then it makes sense to put it in a CI config.&lt;/p&gt;
&lt;h2 id=&#34;docker&#34;&gt;Docker&lt;/h2&gt;
&lt;p&gt;So first thing, I made my first successful docker image build. After running it with a port-forward and seeing that the Dockerfile took the correct content and I saw the page loaded in the browser, I have to say it feels good.&lt;/p&gt;
&lt;p&gt;build image:&lt;br&gt;
&lt;code&gt;docker build -t radimj/repo1 .&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;run and forward port to localhost:&lt;br&gt;
&lt;code&gt;docker run -d -p 80:80 radimj/repo1&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;docker-repository&#34;&gt;Docker repository&lt;/h2&gt;
&lt;p&gt;Next step, where to push the image? Unfortunately, you can&amp;rsquo;t treat docker images like ISOs or packages as the word &amp;ldquo;image&amp;rdquo; would suggest. There are command like &amp;ldquo;save&amp;rdquo; and &amp;ldquo;export&amp;rdquo;, you can look up the details yourself, but the main takeaway is that docker images are not meant to be sent around as packaged files. You have to use a repository. I saw guides for creating local repositories, but again, this is not the main purpose dockers exist. You simply should use a remote repository. You can store them on Azure too, but I didn&amp;rsquo;t have a free account there, so I just went with the simplest solution, I made a private 
&lt;a href=&#34;https://hub.docker.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DockerHub&lt;/a&gt; account.&lt;/p&gt;
&lt;p&gt;Another a little unexpected process is that you don&amp;rsquo;t add the repository through some &amp;ldquo;add repo&amp;rdquo; or something, you have to &lt;code&gt;docker login&lt;/code&gt;. This will hash the login details in ~/.docker/config.json. As far as I know, that is the only place you can find out what repository your docker is using. After that, you have to make sure your image name (tag) that corresponds to your account and repository name, else it wouldn&amp;rsquo;t know where in your repository to add the image. After that, a simple push should work.&lt;/p&gt;
&lt;p&gt;push to docker hub:&lt;br&gt;
&lt;code&gt;docker push radimj/repo1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m noticing I&amp;rsquo;m being unnecessarily detailed and this project had so many small issues that this would end up being a little book. I will be more concise bellow.&lt;/p&gt;
&lt;h2 id=&#34;circleci&#34;&gt;CircleCI&lt;/h2&gt;
&lt;p&gt;Since I didn&amp;rsquo;t have a remote kubernetes cluster to push to, I was satisfied if my CI would just build the image and push it to the repository. The details of the CI config are in the &lt;code&gt;/.circleci/config.yml&lt;/code&gt; you can find it in the project. I kept it as simple as possible. A few notable points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Base image&lt;br&gt;
It takes a moment to choose a fitting base docker image, that is used for the whole CI process.&lt;/li&gt;
&lt;li&gt;Docker&lt;br&gt;
Use docker with &amp;ldquo;- setup_remote_docker&amp;rdquo;. This creates a special environment that the CI uses to work with docker.&lt;/li&gt;
&lt;li&gt;CLI tool&lt;br&gt;
Circle CI has a cli tool that lets you run the build locally. This is good to speed up the creation of the config, but don&amp;rsquo;t rely on it too much. For example the &amp;ldquo;setup_remote_docker&amp;rdquo; command didn&amp;rsquo;t work for me with it and I had to use &amp;ldquo;sudo&amp;rdquo; for the docker commands when running the cli localy.&lt;/li&gt;
&lt;li&gt;SSH into the build&lt;br&gt;
When something breaks only remotely and you don&amp;rsquo;t know why, a last resort is SSH into the CI build. This was an interesting experience. It took a moment to set up, but if you just follow the guide in the docs you should be fine. I managed to get into the docker image that was sitting broken in the remote CI build where I found what was missing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Being able to set up CircleCI was an empowering experience. CI really gives you the feeling like &amp;ldquo;set up once, never touch again&amp;rdquo;. When you first write it, the &amp;ldquo;never touch again&amp;rdquo; feels very good. But after some time, when you forget why you added this or that line&amp;hellip; &amp;ldquo;never touch again&amp;rdquo; can become scary 😂&lt;/p&gt;
&lt;h2 id=&#34;kubernetes&#34;&gt;Kubernetes&lt;/h2&gt;
&lt;p&gt;Kubernetes can be easily tested with Minikube, or similar tools that run a single node cluster on your local drive. Setting up a production ready Kubernetes on a private server is much harder than I expected. It is not like installing nginx or a machine and expecting it to work. I read there are ways how to do it, but for now that is beyond me. Production ready Kubernetes clusters are best chosen from established providers online. After realizing this, being able to use something like Minikube (or others) is a really amazing thing, since it behaves like a real cluster and is perfect for learning and basic testing.&lt;/p&gt;
&lt;p&gt;In Kubernetes, everything is about deployment setups within .yaml files. You can write them by hand, or export them from a running deployment / service / pod with &amp;ndash;output yaml. The Kubernetes documentation is quite good, and every single of my steps here is better explained there. So I will not be rewriting the docs here. Rather, I will show you the process how I put brick on brick with small commands to get to a better understanding of the result.&lt;/p&gt;
&lt;p&gt;First, you need to set up a secret in kubernetes that will be used for authorization when pulling docker images from repos. I did it from the docker login file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl create secret generic regcred \
    --from-file=.dockerconfigjson=&amp;lt;path/to/.docker/config.json&amp;gt; \
    --type=kubernetes.io/dockerconfigjson
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That can be tested by running once pod with the secret:&lt;br&gt;
&lt;code&gt;kubectl run repo1 --overrides=&#39;{ &amp;quot;spec&amp;quot;: { &amp;quot;imagePullSecrets&amp;quot;: [{&amp;quot;name&amp;quot;: &amp;quot;regcred&amp;quot;}] } }&#39; --image=radimj/repo1 --port=80&lt;/code&gt;
The &amp;ldquo;overrides&amp;rdquo; functionality makes more sense when already knowing how a standard yaml config would look like. It is basically just editing a default one.&lt;/p&gt;
&lt;p&gt;The following commands give a way how to look into your pod. In my pod there is nginx exposing my website on port 80.&lt;/p&gt;
&lt;p&gt;forward or expose pod:&lt;br&gt;
&lt;code&gt;kubectl port-forward repo1 8080:80&lt;/code&gt;&lt;br&gt;
&lt;code&gt;kubectl expose pod repo1 --type=&amp;quot;NodePort&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Deployments and services. I will not give examples how to create them or explain in detail what they are. Consult the official docs for details. But in essence, deployments are a bundle of pods, and services are configs how these resources are exposed on ports. They are created in a similar way like pods. All ideally with yaml files. Once you have them running, you can observe them with these commands.&lt;/p&gt;
&lt;p&gt;expose deployment:&lt;br&gt;
&lt;code&gt;kubectl expose deployment circle-deployment --type=LoadBalancer&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;nodeport in:&lt;br&gt;
&lt;code&gt;kubectl get svc&lt;/code&gt;
&lt;code&gt;kubectl describe service repo1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;exposed on:&lt;br&gt;
&lt;code&gt;(minikube ip):&amp;amp;nodePort&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-yaml-management&#34;&gt;Kubernetes Yaml management:&lt;/h2&gt;
&lt;p&gt;create new yaml file from:&lt;br&gt;
&lt;code&gt;kubectl get (deploy / svc / pod ) -o yaml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;run pod / deployment from yaml:&lt;br&gt;
&lt;code&gt;kubectl apply --filename private_deploy.yaml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;revert (delete) from yaml:&lt;br&gt;
&lt;code&gt;kubectl delete -f private_deploy.yaml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This is the roundabout way how to get to your yaml file. But a good learning experience.&lt;/p&gt;
&lt;h2 id=&#34;json-parsing&#34;&gt;JSON parsing&lt;/h2&gt;
&lt;p&gt;One of the most surprising discoveries on this project was 
&lt;a href=&#34;https://stedolan.github.io/jq/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JQ&lt;/a&gt;. When you work with Kubernetes or Azure, you get quickly used to large JSON outputs in your terminal. Both tools have inbuilt ways how to make this more manageable. In Kubernetes, you can query most outputs with &lt;code&gt;--output jsonpath=&amp;quot;&amp;quot;&lt;/code&gt; this is one of the query languages for parsing json. Azure uses &amp;ldquo;JMESPath&amp;rdquo; which is not the same. Azure also uses &lt;code&gt;--output table&lt;/code&gt; heavily, to make things more readable. If you make scripts and you are working only with one tool, then it is probably recommendable to use the inbuilt query parsing tool.&lt;/p&gt;
&lt;p&gt;But let me tell you, to learn just one way that sits forever in your system, that you can use for any JSON string that enters your command line is a great thing! With JQ I was able to do things like:&lt;/p&gt;
&lt;p&gt;display docker login secret from kubectl:\&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl get secret regcred \
    --output jsonpath=&amp;quot;{.data.\.dockerconfigjson}&amp;quot; | \
    base64 --decode | \
    jq &amp;quot;.auths | map(.auth)[0]&amp;quot; -r | \
    base64 --decode
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see the use of both &amp;ldquo;jsonpath&amp;rdquo; and &amp;ldquo;jq&amp;rdquo; here for comparison. The output tells you exactly what login your kubectl is using. Also, good to understand how the secrets are stored in kubernetes.&lt;/p&gt;
&lt;h2 id=&#34;helm&#34;&gt;Helm&lt;/h2&gt;
&lt;p&gt;Again, I won&amp;rsquo;t go into details, this post is long enough. But simply put, helm is a bundle of kubernetes yaml config files, also called &amp;ldquo;manifests&amp;rdquo;. With helm, you can create files that hold variable names and you can distribute these variable through your manifests. This creates a setup where you can have a hundred manifests with thousands of lines, but if they all run together in a setup, you can just put variable names into all of them and then adjust the variable in just one place. Making releases of big projects manageable. This bundle of manifests is called a &amp;ldquo;chart&amp;rdquo; in helm. You can also have full repositories of charts, but I will not be getting into that here.&lt;/p&gt;
&lt;p&gt;lint chart:&lt;br&gt;
&lt;code&gt;helm lint circle-chart/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In the bellow example, I am packaging the chart folder into a package. This is useful for distribution, but not necessary if you are running it from just one place. You can simply call the commands on the chart folder as well.&lt;/p&gt;
&lt;p&gt;build package:&lt;br&gt;
&lt;code&gt;helm package circle-chart/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;install: (name should be same as package name)&lt;br&gt;
&lt;code&gt;helm install circle circle-0.2.0.tgz&lt;/code&gt;
&lt;code&gt;helm install circle circle-chart/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;check release:&lt;br&gt;
&lt;code&gt;helm ls&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;uninstall totally:&lt;br&gt;
&lt;code&gt;helm uninstall circle&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;rolling-update&#34;&gt;rolling update:&lt;/h3&gt;
&lt;p&gt;The following command changes only necessary pods, it does not update to &amp;ldquo;latest&amp;rdquo;
&lt;code&gt;helm upgrade --install circle circle-chart/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;if you want to change &amp;ldquo;latest&amp;rdquo; tags, old way was:
&lt;code&gt;helm upgrade --install --recreate-pods circle circle-chart/&lt;/code&gt;
new way is to add a random annotation in metadata:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;      annotations:
# creates a random 5-letter word, causing the pods to be recreated
        rollme: {{ randAlphaNum 5 | quote }}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Setting up a CI/CD flow is not a new thing. Jenkins was released 2011, that&amp;rsquo;s like a millennium in the tech world. The concept of container images is not new either, but it is undeniable that Docker containers are on a big wave right now and related solutions like Kubernetes and Helm are pulled along. In this project, I&amp;rsquo;m showing that anything, when taken piece by piece, can be learned. And why not learn the basics of the biggest wave in the current tech ocean?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Making a video</title>
      <link>/ja/project/video/</link>
      <pubDate>Sat, 18 Jul 2020 00:00:00 +0000</pubDate>
      <guid>/ja/project/video/</guid>
      <description>&lt;p&gt;I started my linux journey February 2018 with linux mint. Half a year later I knew that this is the system for me and I felt an obligation to give back to the community something. I wasn&amp;rsquo;t ready yet to contribute code to some specific project, but there was one thing that put me in a special category. I am using Japanese input on the pc sometimes and when it became broken in Linux Mint 19, I felt an opportunity to contribute. Also, I never made a YouTube video before and I wanted to learn a little about video editing on linux.&lt;/p&gt;
&lt;p&gt;For the desktop capture I used OBS studio. This is probably the by far the easiest and best choice. There is also &amp;ldquo;simple screen recorder&amp;rdquo;, which will do the job if you don&amp;rsquo;t need to manage any windows and you want only a &amp;ldquo;simple screen recording&amp;rdquo; as the name suggests. But chances are, especially if you want to continue making videos, OBS is the better choice and it is simple enough to use even for simple recordings.&lt;/p&gt;
&lt;p&gt;The bigger question was what video editor to use. Here the answer is much less clear cut (pun intended). The top free recommendations, in this order, are probably Kdenlive and Shotcut. If for some reason both don&amp;rsquo;t work for you well, there are many other options. Another simple editor is OpenShot, which I didn&amp;rsquo;t like too much, or also &amp;ldquo;DaVinci resolve&amp;rdquo;, which got very popular, but is catered more towards professional editing with emphasis on color adjustment and might be more than you need for simple video cutting. If you google &amp;ldquo;free video editors&amp;rdquo; you will get a plethora of top 10s, but take them always with a grain of salt. There is always bias in those rankings.&lt;/p&gt;
&lt;p&gt;In my case, Kdenlive did the job well. I just edited some small parts, added a fitting free music track into the background and rendered.&lt;/p&gt;
&lt;p&gt;In conclusion, were I to redo the video today, I would still use the same tools, but I would do it on a better machine. Preferably with a good microphone. It was done on an old laptop, and recording while running a virtual machine can be an issue. I would also make more small recording/edit samples, to make sure that the final result will have a high resolution, which mine was lacking. Also, a lesson was, that when doing a video, where text is of importance, it&amp;rsquo;s always better to scale up system text, to make it more visible to viewers.&lt;/p&gt;
&lt;p&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/UIKm67gDGEk&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;PS: The main bug that convinced me to make the video was announced to be fixed just a couple of days after my video was done. I was pleasantly surprised that this issue didn&amp;rsquo;t go unnoticed by the developers. I talked briefly with Clem, the main developer of Linux Mint and tested the fix when the beta came out. The video is not only about the installation and bug fix, but talks also about how to setup and use the Japanese input, so I think it can still be useful and I kept it online.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go club and Tournament organization</title>
      <link>/ja/project/go_club/</link>
      <pubDate>Tue, 14 Jul 2020 00:00:00 +0000</pubDate>
      <guid>/ja/project/go_club/</guid>
      <description>&lt;p&gt;Go has been for a long time one of my big passions. When I was still living in Děčín, the town where I grew up in, I managed to set up a club, where a few members were meeting once a week to learn, play and discuss go together. I also did a few presentations about go (its history and rules) in high schools, local festivals and tea houses.&lt;/p&gt;
&lt;p&gt;During 2011-2014 we were holding a nationwide tournament every Spring. Below are a few pictures. Especially the tournament 2013 was important, as it was the qualification for that year&amp;rsquo;s national championship. We hosted a few international players from neighboring countries and had a small column in the local newspaper about it.&lt;/p&gt;
&lt;p&gt;Later 2014, after I got back from my 6-month exchange student program in South Korea, I moved to Prague for a better job. I left the go club that I started in my hometown, but I will always remember those years with joy. I am very proud that I could spread the love of go in my hometown, but also that I was able to give back and support a little the go community in my country.&lt;/p&gt;
&lt;h2 id=&#34;tournaments-2010---2014&#34;&gt;Tournaments (2010 - 2014)&lt;/h2&gt;








  
  


&lt;div class=&#34;gallery&#34;&gt;

  
  
  
  
    
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-tournament&#34; href=&#34;/ja/project/go_club/tournament/1_DSC06727_resize.JPG&#34; &gt;
  &lt;img data-src=&#34;/ja/project/go_club/tournament/1_DSC06727_resize_hu1cbff1ff7a97b9fbd8c27277482801d5_196452_0x190_resize_q90_lanczos.JPG&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;284&#34; height=&#34;190&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-tournament&#34; href=&#34;/ja/project/go_club/tournament/2_IMG_5055_resize.JPG&#34; &gt;
  &lt;img data-src=&#34;/ja/project/go_club/tournament/2_IMG_5055_resize_hu1fae3b6633047687057f8f76b87b60c2_173246_0x190_resize_q90_lanczos.JPG&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;285&#34; height=&#34;190&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-tournament&#34; href=&#34;/ja/project/go_club/tournament/DSC02847.JPG&#34; &gt;
  &lt;img data-src=&#34;/ja/project/go_club/tournament/DSC02847_hu9bd9d8f108d4c3df2890afebc4e5b775_254769_0x190_resize_q90_lanczos.JPG&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;284&#34; height=&#34;190&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-tournament&#34; href=&#34;/ja/project/go_club/tournament/IMG_2658.JPG&#34; &gt;
  &lt;img data-src=&#34;/ja/project/go_club/tournament/IMG_2658_hu5e2e8fbc3d0f474a1be4a3a89fb2f35e_171205_0x190_resize_q90_lanczos.JPG&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;285&#34; height=&#34;190&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-tournament&#34; href=&#34;/ja/project/go_club/tournament/IMG_2661.JPG&#34; &gt;
  &lt;img data-src=&#34;/ja/project/go_club/tournament/IMG_2661_hue5c33e7310b8c70b9056e5d76352d7fa_179781_0x190_resize_q90_lanczos.JPG&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;285&#34; height=&#34;190&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-tournament&#34; href=&#34;/ja/project/go_club/tournament/IMG_2662.JPG&#34; &gt;
  &lt;img data-src=&#34;/ja/project/go_club/tournament/IMG_2662_hu2b7091cf260d9bfc3ec8a25d900095f4_152473_0x190_resize_q90_lanczos.JPG&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;285&#34; height=&#34;190&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-tournament&#34; href=&#34;/ja/project/go_club/tournament/IMG_2663.JPG&#34; &gt;
  &lt;img data-src=&#34;/ja/project/go_club/tournament/IMG_2663_hud8fdc9d906886e5f9360895a01a466fe_165277_0x190_resize_q90_lanczos.JPG&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;285&#34; height=&#34;190&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-tournament&#34; href=&#34;/ja/project/go_club/tournament/IMG_2717.JPG&#34; &gt;
  &lt;img data-src=&#34;/ja/project/go_club/tournament/IMG_2717_huef0e4c0891c04db6bb3164fa27d81314_220361_0x190_resize_q90_lanczos.JPG&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;127&#34; height=&#34;190&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-tournament&#34; href=&#34;/ja/project/go_club/tournament/IMG_5190_resize.JPG&#34; &gt;
  &lt;img data-src=&#34;/ja/project/go_club/tournament/IMG_5190_resize_hue8fdab6e51257f5444d03272a09dc69b_205084_0x190_resize_q90_lanczos.JPG&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;285&#34; height=&#34;190&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-tournament&#34; href=&#34;/ja/project/go_club/tournament/P1010349.JPG&#34; &gt;
  &lt;img data-src=&#34;/ja/project/go_club/tournament/P1010349_hu93bfde04217410072ab8f898301d7cd3_277420_0x190_resize_q90_lanczos.JPG&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;142&#34; height=&#34;190&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-tournament&#34; href=&#34;/ja/project/go_club/tournament/go_princip.JPG&#34; &gt;
  &lt;img data-src=&#34;/ja/project/go_club/tournament/go_princip_hu9dda310738050e223870d8aaba163bcf_770785_0x190_resize_q90_lanczos.JPG&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;192&#34; height=&#34;190&#34;&gt;
  &lt;/a&gt;
  

  
&lt;/div&gt;
&lt;h2 id=&#34;club-activities-2007---2014&#34;&gt;Club activities (2007 - 2014)&lt;/h2&gt;








  
  


&lt;div class=&#34;gallery&#34;&gt;

  
  
  
  
    
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-club&#34; href=&#34;/ja/project/go_club/club/02.JPG&#34; &gt;
  &lt;img data-src=&#34;/ja/project/go_club/club/02_hu93afc63e56e5bf4f8dbc60b34fcd3274_199293_0x190_resize_q90_lanczos.JPG&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;253&#34; height=&#34;190&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-club&#34; href=&#34;/ja/project/go_club/club/07.JPG&#34; &gt;
  &lt;img data-src=&#34;/ja/project/go_club/club/07_hub023c0c99dfef1771bfb40775f4cdca7_177309_0x190_resize_q90_lanczos.JPG&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;253&#34; height=&#34;190&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-club&#34; href=&#34;/ja/project/go_club/club/P1010135.JPG&#34; &gt;
  &lt;img data-src=&#34;/ja/project/go_club/club/P1010135_hufc7660a17140301b368f8c76de4c15c1_183546_0x190_resize_q90_lanczos.JPG&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;253&#34; height=&#34;190&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-club&#34; href=&#34;/ja/project/go_club/club/P1010390.JPG&#34; &gt;
  &lt;img data-src=&#34;/ja/project/go_club/club/P1010390_hu35acb9ec00447669f367c0ac28f3264d_1583477_0x190_resize_q90_lanczos.JPG&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;253&#34; height=&#34;190&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-club&#34; href=&#34;/ja/project/go_club/club/P1010392.JPG&#34; &gt;
  &lt;img data-src=&#34;/ja/project/go_club/club/P1010392_hu3a35763e0da4676d23222ab5e433a093_1398371_0x190_resize_q90_lanczos.JPG&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;253&#34; height=&#34;190&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-club&#34; href=&#34;/ja/project/go_club/club/P1010468.JPG&#34; &gt;
  &lt;img data-src=&#34;/ja/project/go_club/club/P1010468_hu387bafd2963ccafe1a64dc69a9765815_1534293_0x190_resize_q90_lanczos.JPG&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;253&#34; height=&#34;190&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-club&#34; href=&#34;/ja/project/go_club/club/park.jpg&#34; &gt;
  &lt;img data-src=&#34;/ja/project/go_club/club/park_hucd3a4d91d21db72bfa3cf1f957defcb0_697741_0x190_resize_q90_lanczos.jpg&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;253&#34; height=&#34;190&#34;&gt;
  &lt;/a&gt;
  

  
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
